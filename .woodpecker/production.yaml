# Production workflow - builds and deploys release images
when:
  - event: tag
  - event: manual
    branch: main
  - event: push
    branch: main

clone:
  git:
    image: woodpeckerci/plugin-git
    settings:
      depth: 0
      tags: true

steps:
  # Discover release tag and commit hash
  compute-release-tag:
    image: alpine/git:latest
    commands:
      - set -e
      - |
        if [ "$CI_PIPELINE_EVENT" = "tag" ] && [ -n "$CI_COMMIT_TAG" ]; then
          TAG="$CI_COMMIT_TAG"
        elif [ -n "${OVERRIDE_TAG:-}" ]; then
          TAG="$OVERRIDE_TAG"
        else
          # Use the newest existing tag from the clone (no network)
          TAG="$(git describe --tags --abbrev=0 2>/dev/null || git tag --sort=-creatordate | head -n1 || true)"
          if [ -z "$TAG" ]; then
            echo "No git tags found. On manual runs provide OVERRIDE_TAG (e.g., v1.0.0)." >&2
            exit 1
          fi
        fi

        # Extract commit hash
        COMMIT_HASH=$(git rev-parse --short HEAD)
        
        printf "%s\n%s\n" "$${TAG}" "latest" > .tags
        echo "APP_VERSION=$${TAG}" >> .env
        echo "APP_COMMIT_HASH=$${COMMIT_HASH}" >> .env
        echo "Release tags:"
        cat .tags
        echo "Version: $${TAG}"
        echo "Commit hash: $${COMMIT_HASH}"

  # Build and push release image
  docker-build-release:
    image: woodpeckerci/plugin-docker-buildx
    depends_on:
      - compute-release-tag
    settings:
      registry: ghcr.io
      repo: ghcr.io/frostwalk/frontend
      tags_file: .tags
      dockerfile: Dockerfile
      build_args:
        - APP_VERSION=$${APP_VERSION}
        - APP_COMMIT_HASH=$${APP_COMMIT_HASH}
      labels:
        - org.opencontainers.image.source="https://github.com/frostkalk/frontend"
        - org.opencontainers.image.licenses="MIT"
        - org.opencontainers.image.description="Production image of frontend"
      default_labels: true
      username:
        from_secret: GHCR_USERNAME
      password:
        from_secret: GHCR_TOKEN

  # Trigger watchtower after successful build
  trigger-watchtower:
    image: curlimages/curl:latest
    depends_on:
      - docker-build-release
    environment:
      WT_URL: https://wt.advancedprogramming.ovh/v1/update
      WT_TOKEN:
        from_secret: WATCHTOWER_TOKEN
    commands:
      - 'curl -fsS -X POST -H "Authorization: Bearer $${WT_TOKEN}" "$WT_URL"'

