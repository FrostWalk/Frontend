// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AddMember2Data, AddMember2Errors, AddMember2Responses, AddMemberData, AddMemberErrors, AddMemberResponses, AdminsLoginHandlerData, AdminsLoginHandlerErrors, AdminsLoginHandlerResponses, AdminsMeHandlerData, AdminsMeHandlerErrors, AdminsMeHandlerResponses, AssignCoordinatorData, AssignCoordinatorErrors, AssignCoordinatorResponses, CheckNameData, CheckNameErrors, CheckNameResponses, ConfirmStudentHandlerData, ConfirmStudentHandlerErrors, ConfirmStudentHandlerResponses, CreateAdminHandlerData, CreateAdminHandlerErrors, CreateAdminHandlerResponses, CreateCodeHandlerData, CreateCodeHandlerErrors, CreateCodeHandlerResponses, CreateGroupComponentHandlerData, CreateGroupComponentHandlerErrors, CreateGroupComponentHandlerResponses, CreateGroupData, CreateGroupDeliverableComponentHandlerData, CreateGroupDeliverableComponentHandlerErrors, CreateGroupDeliverableComponentHandlerResponses, CreateGroupDeliverableHandlerData, CreateGroupDeliverableHandlerErrors, CreateGroupDeliverableHandlerResponses, CreateGroupDeliverableSelectionData, CreateGroupDeliverableSelectionErrors, CreateGroupDeliverableSelectionResponses, CreateGroupErrors, CreateGroupResponses, CreateProjectHandlerData, CreateProjectHandlerErrors, CreateProjectHandlerResponses, CreateStudentComponentHandlerData, CreateStudentComponentHandlerErrors, CreateStudentComponentHandlerResponses, CreateStudentDeliverableComponentHandlerData, CreateStudentDeliverableComponentHandlerErrors, CreateStudentDeliverableComponentHandlerResponses, CreateStudentDeliverableHandlerData, CreateStudentDeliverableHandlerErrors, CreateStudentDeliverableHandlerResponses, CreateStudentDeliverableSelectionData, CreateStudentDeliverableSelectionErrors, CreateStudentDeliverableSelectionResponses, DeleteAdminHandlerData, DeleteAdminHandlerErrors, DeleteAdminHandlerResponses, DeleteGroupComponentHandlerData, DeleteGroupComponentHandlerErrors, DeleteGroupComponentHandlerResponses, DeleteGroupData, DeleteGroupDeliverableComponentHandlerData, DeleteGroupDeliverableComponentHandlerErrors, DeleteGroupDeliverableComponentHandlerResponses, DeleteGroupDeliverableHandlerData, DeleteGroupDeliverableHandlerErrors, DeleteGroupDeliverableHandlerResponses, DeleteGroupErrors, DeleteGroupResponses, DeleteProjectHandlerData, DeleteProjectHandlerErrors, DeleteProjectHandlerResponses, DeleteStudentComponentHandlerData, DeleteStudentComponentHandlerErrors, DeleteStudentComponentHandlerResponses, DeleteStudentDeliverableComponentHandlerData, DeleteStudentDeliverableComponentHandlerErrors, DeleteStudentDeliverableComponentHandlerResponses, DeleteStudentDeliverableHandlerData, DeleteStudentDeliverableHandlerErrors, DeleteStudentDeliverableHandlerResponses, DeleteStudentDeliverableSelectionData, DeleteStudentDeliverableSelectionErrors, DeleteStudentDeliverableSelectionResponses, ForgotPasswordHandler2Data, ForgotPasswordHandler2Errors, ForgotPasswordHandler2Responses, ForgotPasswordHandlerData, ForgotPasswordHandlerErrors, ForgotPasswordHandlerResponses, GetAllAdminsHandlerData, GetAllAdminsHandlerErrors, GetAllAdminsHandlerResponses, GetAllCodesHandlerData, GetAllCodesHandlerErrors, GetAllCodesHandlerResponses, GetAllGroupComponentsHandlerData, GetAllGroupComponentsHandlerErrors, GetAllGroupComponentsHandlerResponses, GetAllGroupDeliverablesHandlerData, GetAllGroupDeliverablesHandlerErrors, GetAllGroupDeliverablesHandlerResponses, GetAllProjectsHandlerData, GetAllProjectsHandlerErrors, GetAllProjectsHandlerResponses, GetAllStudentComponentsHandlerData, GetAllStudentComponentsHandlerErrors, GetAllStudentComponentsHandlerResponses, GetAllStudentDeliverablesHandlerData, GetAllStudentDeliverablesHandlerErrors, GetAllStudentDeliverablesHandlerResponses, GetComponentsForDeliverableHandler2Data, GetComponentsForDeliverableHandler2Errors, GetComponentsForDeliverableHandler2Responses, GetComponentsForDeliverableHandlerData, GetComponentsForDeliverableHandlerErrors, GetComponentsForDeliverableHandlerResponses, GetComponentsForGroupDeliverableHandlerData, GetComponentsForGroupDeliverableHandlerErrors, GetComponentsForGroupDeliverableHandlerResponses, GetComponentsForStudentDeliverableHandlerData, GetComponentsForStudentDeliverableHandlerErrors, GetComponentsForStudentDeliverableHandlerResponses, GetDeliverablesForComponentHandler2Data, GetDeliverablesForComponentHandler2Errors, GetDeliverablesForComponentHandler2Responses, GetDeliverablesForComponentHandlerData, GetDeliverablesForComponentHandlerErrors, GetDeliverablesForComponentHandlerResponses, GetDeliverablesForGroupComponentHandlerData, GetDeliverablesForGroupComponentHandlerErrors, GetDeliverablesForGroupComponentHandlerResponses, GetDeliverablesForStudentComponentHandlerData, GetDeliverablesForStudentComponentHandlerErrors, GetDeliverablesForStudentComponentHandlerResponses, GetGroupComponentHandlerData, GetGroupComponentHandlerErrors, GetGroupComponentHandlerResponses, GetGroupComponentsForProjectHandlerData, GetGroupComponentsForProjectHandlerErrors, GetGroupComponentsForProjectHandlerResponses, GetGroupDeliverableHandlerData, GetGroupDeliverableHandlerErrors, GetGroupDeliverableHandlerResponses, GetGroupDeliverableSelectionData, GetGroupDeliverableSelectionErrors, GetGroupDeliverableSelectionResponses, GetGroupDeliverableSelectionsData, GetGroupDeliverableSelectionsErrors, GetGroupDeliverableSelectionsResponses, GetGroupDeliverablesForProjectHandlerData, GetGroupDeliverablesForProjectHandlerErrors, GetGroupDeliverablesForProjectHandlerResponses, GetGroupDetailsData, GetGroupDetailsErrors, GetGroupDetailsResponses, GetGroupsData, GetGroupsErrors, GetGroupsResponses, GetOneAdminHandlerData, GetOneAdminHandlerErrors, GetOneAdminHandlerResponses, GetOneProjectHandlerData, GetOneProjectHandlerErrors, GetOneProjectHandlerResponses, GetProjectGroupsData, GetProjectGroupsErrors, GetProjectGroupsResponses, GetStudentComponentHandlerData, GetStudentComponentHandlerErrors, GetStudentComponentHandlerResponses, GetStudentComponentsForProjectHandlerData, GetStudentComponentsForProjectHandlerErrors, GetStudentComponentsForProjectHandlerResponses, GetStudentDeliverableHandlerData, GetStudentDeliverableHandlerErrors, GetStudentDeliverableHandlerResponses, GetStudentDeliverableSelectionData, GetStudentDeliverableSelectionErrors, GetStudentDeliverableSelectionResponses, GetStudentDeliverableSelectionsData, GetStudentDeliverableSelectionsErrors, GetStudentDeliverableSelectionsResponses, GetStudentDeliverablesForProjectHandlerData, GetStudentDeliverablesForProjectHandlerErrors, GetStudentDeliverablesForProjectHandlerResponses, GetStudentProjectsData, GetStudentProjectsErrors, GetStudentProjectsResponses, HealthCheckData, HealthCheckErrors, HealthCheckResponses, ListCoordinatorsData, ListCoordinatorsErrors, ListCoordinatorsResponses, ListGroupMembersData, ListGroupMembersErrors, ListGroupMembersResponses, LivenessCheckData, LivenessCheckResponses, RemoveCoordinatorData, RemoveCoordinatorErrors, RemoveCoordinatorResponses, RemoveMember2Data, RemoveMember2Errors, RemoveMember2Responses, RemoveMemberData, RemoveMemberErrors, RemoveMemberResponses, ResetPasswordHandler2Data, ResetPasswordHandler2Errors, ResetPasswordHandler2Responses, ResetPasswordHandlerData, ResetPasswordHandlerErrors, ResetPasswordHandlerResponses, StudentSignupHandlerData, StudentSignupHandlerErrors, StudentSignupHandlerResponses, StudentsLoginHandlerData, StudentsLoginHandlerErrors, StudentsLoginHandlerResponses, StudentsMeHandlerData, StudentsMeHandlerErrors, StudentsMeHandlerResponses, TransferLeadershipData, TransferLeadershipErrors, TransferLeadershipResponses, UpdateAdminHandlerData, UpdateAdminHandlerErrors, UpdateAdminHandlerResponses, UpdateGroupComponentHandlerData, UpdateGroupComponentHandlerErrors, UpdateGroupComponentHandlerResponses, UpdateGroupDeliverableComponentHandlerData, UpdateGroupDeliverableComponentHandlerErrors, UpdateGroupDeliverableComponentHandlerResponses, UpdateGroupDeliverableHandlerData, UpdateGroupDeliverableHandlerErrors, UpdateGroupDeliverableHandlerResponses, UpdateGroupDeliverableSelectionData, UpdateGroupDeliverableSelectionErrors, UpdateGroupDeliverableSelectionResponses, UpdateProjectHandlerData, UpdateProjectHandlerErrors, UpdateProjectHandlerResponses, UpdateStudentComponentHandlerData, UpdateStudentComponentHandlerErrors, UpdateStudentComponentHandlerResponses, UpdateStudentDeliverableComponentHandlerData, UpdateStudentDeliverableComponentHandlerErrors, UpdateStudentDeliverableComponentHandlerResponses, UpdateStudentDeliverableHandlerData, UpdateStudentDeliverableHandlerErrors, UpdateStudentDeliverableHandlerResponses, UpdateStudentDeliverableSelectionData, UpdateStudentDeliverableSelectionErrors, UpdateStudentDeliverableSelectionResponses, ValidateCodeData, ValidateCodeErrors, ValidateCodeResponses, VersionInfoData, VersionInfoResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get application health status
 * Comprehensive health check that includes database connectivity and application status
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckResponses, HealthCheckErrors, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Get service liveness status
 * Simple liveness check that returns 200 OK if the service is running
 */
export const livenessCheck = <ThrowOnError extends boolean = false>(options?: Options<LivenessCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<LivenessCheckResponses, unknown, ThrowOnError>({
        url: '/health/live',
        ...options
    });
};

/**
 * Requests a password reset for an admin account
 * This endpoint sends a password reset email to the specified email address if an admin
 * account with that email exists. The email contains a secure link to reset the password.
 */
export const forgotPasswordHandler = <ThrowOnError extends boolean = false>(options: Options<ForgotPasswordHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<ForgotPasswordHandlerResponses, ForgotPasswordHandlerErrors, ThrowOnError>({
        url: '/v1/admins/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Authenticates an admin and returns a JWT.
 * This endpoint validates user credentials and issues a JWT upon successful authentication.
 */
export const adminsLoginHandler = <ThrowOnError extends boolean = false>(options: Options<AdminsLoginHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<AdminsLoginHandlerResponses, AdminsLoginHandlerErrors, ThrowOnError>({
        url: '/v1/admins/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Resets an admin's password using a valid reset token
 * This endpoint validates the password reset token and updates the admin's password.
 * The token is sent to the admin's email via the forgot-password endpoint.
 */
export const resetPasswordHandler = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<ResetPasswordHandlerResponses, ResetPasswordHandlerErrors, ThrowOnError>({
        url: '/v1/admins/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all group components.
 * Returns all group components across all projects.
 */
export const getAllGroupComponentsHandler = <ThrowOnError extends boolean = false>(options?: Options<GetAllGroupComponentsHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllGroupComponentsHandlerResponses, GetAllGroupComponentsHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverable-components',
        ...options
    });
};

/**
 * Creates a new group component.
 * This endpoint allows authenticated admins to create a new group component for a specific project.
 */
export const createGroupComponentHandler = <ThrowOnError extends boolean = false>(options: Options<CreateGroupComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateGroupComponentHandlerResponses, CreateGroupComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverable-components',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all group components for a specific project.
 * Returns all group components associated with the specified project.
 */
export const getGroupComponentsForProjectHandler = <ThrowOnError extends boolean = false>(options: Options<GetGroupComponentsForProjectHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupComponentsForProjectHandlerResponses, GetGroupComponentsForProjectHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverable-components/project/{project_id}',
        ...options
    });
};

/**
 * Deletes a group component.
 * This endpoint allows authenticated admins to remove a group component by ID.
 */
export const deleteGroupComponentHandler = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteGroupComponentHandlerResponses, DeleteGroupComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverable-components/{id}',
        ...options
    });
};

/**
 * Get a specific group component by ID.
 * Returns the details of the specified group component.
 */
export const getGroupComponentHandler = <ThrowOnError extends boolean = false>(options: Options<GetGroupComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupComponentHandlerResponses, GetGroupComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverable-components/{id}',
        ...options
    });
};

/**
 * Updates a group component.
 * This endpoint allows authenticated admins to modify the name of a group component by ID.
 */
export const updateGroupComponentHandler = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateGroupComponentHandlerResponses, UpdateGroupComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverable-components/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all deliverables that use a specific group component.
 * Returns all group deliverables that use the specified component along with their quantities.
 */
export const getDeliverablesForGroupComponentHandler = <ThrowOnError extends boolean = false>(options: Options<GetDeliverablesForGroupComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDeliverablesForGroupComponentHandlerResponses, GetDeliverablesForGroupComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverable-components/{id}/deliverables',
        ...options
    });
};

/**
 * Get all group deliverables.
 * Returns all group deliverables across all projects.
 */
export const getAllGroupDeliverablesHandler = <ThrowOnError extends boolean = false>(options?: Options<GetAllGroupDeliverablesHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllGroupDeliverablesHandlerResponses, GetAllGroupDeliverablesHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables',
        ...options
    });
};

/**
 * Creates a new group deliverable.
 * This endpoint allows authenticated admins to create a new group deliverable for a specific project.
 */
export const createGroupDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<CreateGroupDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateGroupDeliverableHandlerResponses, CreateGroupDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Creates a new group deliverable-component relationship.
 * This endpoint allows authenticated admins to add components to group deliverables with specified quantities.
 */
export const createGroupDeliverableComponentHandler = <ThrowOnError extends boolean = false>(options: Options<CreateGroupDeliverableComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateGroupDeliverableComponentHandlerResponses, CreateGroupDeliverableComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables-components',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all components for a specific group deliverable.
 * Returns all components associated with the specified group deliverable along with their quantities.
 */
export const getComponentsForDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<GetComponentsForDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetComponentsForDeliverableHandlerResponses, GetComponentsForDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables-components/components/{deliverable_id}',
        ...options
    });
};

/**
 * Get all deliverables that use a specific group component.
 * Returns all group deliverables that use the specified component along with their quantities.
 */
export const getDeliverablesForComponentHandler = <ThrowOnError extends boolean = false>(options: Options<GetDeliverablesForComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDeliverablesForComponentHandlerResponses, GetDeliverablesForComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables-components/deliverables/{component_id}',
        ...options
    });
};

/**
 * Removes a component from a group deliverable.
 * This endpoint allows authenticated admins to remove the relationship between a component and a group deliverable by ID.
 */
export const deleteGroupDeliverableComponentHandler = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupDeliverableComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteGroupDeliverableComponentHandlerResponses, DeleteGroupDeliverableComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables-components/{id}',
        ...options
    });
};

/**
 * Updates the quantity of a component in a group deliverable.
 * This endpoint allows authenticated admins to modify the quantity of a component in a group deliverable by ID.
 */
export const updateGroupDeliverableComponentHandler = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupDeliverableComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateGroupDeliverableComponentHandlerResponses, UpdateGroupDeliverableComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables-components/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all group deliverables for a specific project.
 * Returns all group deliverables associated with the specified project.
 */
export const getGroupDeliverablesForProjectHandler = <ThrowOnError extends boolean = false>(options: Options<GetGroupDeliverablesForProjectHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupDeliverablesForProjectHandlerResponses, GetGroupDeliverablesForProjectHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables/project/{project_id}',
        ...options
    });
};

/**
 * Deletes a group deliverable.
 * This endpoint allows authenticated admins to remove a group deliverable by ID.
 */
export const deleteGroupDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteGroupDeliverableHandlerResponses, DeleteGroupDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables/{id}',
        ...options
    });
};

/**
 * Get a specific group deliverable by ID.
 * Returns the details of the specified group deliverable.
 */
export const getGroupDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<GetGroupDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupDeliverableHandlerResponses, GetGroupDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables/{id}',
        ...options
    });
};

/**
 * Updates a group deliverable.
 * This endpoint allows authenticated admins to modify the name of a group deliverable by ID.
 */
export const updateGroupDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateGroupDeliverableHandlerResponses, UpdateGroupDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all components for a specific group deliverable.
 * Returns all components associated with the specified group deliverable along with their quantities.
 */
export const getComponentsForGroupDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<GetComponentsForGroupDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetComponentsForGroupDeliverableHandlerResponses, GetComponentsForGroupDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/group-deliverables/{id}/components',
        ...options
    });
};

/**
 * List all groups in a project with their members and deliverable selections
 * This endpoint allows admins to view all groups in a project with member counts,
 * group leaders, and their chosen deliverables. Includes time_expired field for
 * groups that haven't selected a deliverable by the deadline.
 */
export const getProjectGroups = <ThrowOnError extends boolean = false>(options: Options<GetProjectGroupsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectGroupsResponses, GetProjectGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/groups/projects/{project_id}',
        ...options
    });
};

/**
 * Get detailed information about a specific group
 * This endpoint allows admins to view comprehensive details about a group including:
 * - All members with their roles
 * - The group's deliverable selection (if any)
 * - Individual student deliverable selections for group members
 */
export const getGroupDetails = <ThrowOnError extends boolean = false>(options: Options<GetGroupDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupDetailsResponses, GetGroupDetailsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/groups/{group_id}',
        ...options
    });
};

/**
 * Transfer group leadership (Admin/Coordinator)
 * This endpoint allows admins and coordinators to change the Group Leader of a group.
 * Can optionally remove the old leader or demote them to member.
 */
export const transferLeadership = <ThrowOnError extends boolean = false>(options: Options<TransferLeadershipData, ThrowOnError>) => {
    return (options.client ?? client).patch<TransferLeadershipResponses, TransferLeadershipErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/groups/{group_id}/leader',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a member to a group (Admin/Coordinator)
 * This endpoint allows admins and coordinators to manually add students to groups.
 * Can add students as members or group leaders.
 */
export const addMember = <ThrowOnError extends boolean = false>(options: Options<AddMemberData, ThrowOnError>) => {
    return (options.client ?? client).post<AddMemberResponses, AddMemberErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/groups/{group_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a member from a group (Admin/Coordinator)
 * This endpoint allows admins and coordinators to remove any member from a group,
 * including the Group Leader. Must delete the student's deliverable selection when removed.
 */
export const removeMember = <ThrowOnError extends boolean = false>(options: Options<RemoveMemberData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveMemberResponses, RemoveMemberErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/groups/{group_id}/members/{student_id}',
        ...options
    });
};

/**
 * Get all projects details
 * Returns all projects for Professors/Root, or only assigned projects for Coordinators
 */
export const getAllProjectsHandler = <ThrowOnError extends boolean = false>(options?: Options<GetAllProjectsHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllProjectsHandlerResponses, GetAllProjectsHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects',
        ...options
    });
};

/**
 * Create a project
 */
export const createProjectHandler = <ThrowOnError extends boolean = false>(options: Options<CreateProjectHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateProjectHandlerResponses, CreateProjectHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a project by id
 */
export const deleteProjectHandler = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectHandlerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectHandlerResponses, DeleteProjectHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects/{id}',
        ...options
    });
};

/**
 * Get project details by id with deliverables and components
 * Coordinators can only view projects they are assigned to. Professors/Root can view any project.
 */
export const getOneProjectHandler = <ThrowOnError extends boolean = false>(options: Options<GetOneProjectHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetOneProjectHandlerResponses, GetOneProjectHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects/{id}',
        ...options
    });
};

/**
 * Update a project details
 */
export const updateProjectHandler = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectHandlerData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateProjectHandlerResponses, UpdateProjectHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the coordinator assigned to a project
 * This endpoint allows admins to view the coordinator assigned to a specific project.
 * Returns null if no coordinator is assigned.
 */
export const listCoordinators = <ThrowOnError extends boolean = false>(options: Options<ListCoordinatorsData, ThrowOnError>) => {
    return (options.client ?? client).get<ListCoordinatorsResponses, ListCoordinatorsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects/{project_id}/coordinators',
        ...options
    });
};

/**
 * Assign a coordinator to a project
 * This endpoint allows Professors and Root admins to assign Coordinators to specific projects.
 * Only admins with the Coordinator role can be assigned.
 * **Constraint**: At most one coordinator can be assigned per project.
 */
export const assignCoordinator = <ThrowOnError extends boolean = false>(options: Options<AssignCoordinatorData, ThrowOnError>) => {
    return (options.client ?? client).post<AssignCoordinatorResponses, AssignCoordinatorErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects/{project_id}/coordinators',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a coordinator from a project
 * This endpoint allows Professors and Root admins to remove coordinator assignments from projects.
 */
export const removeCoordinator = <ThrowOnError extends boolean = false>(options: Options<RemoveCoordinatorData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveCoordinatorResponses, RemoveCoordinatorErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects/{project_id}/coordinators/{admin_id}',
        ...options
    });
};

/**
 * List all group deliverable selections for a project
 * This endpoint allows admins to view all group deliverable selections for a specific project,
 * including which deliverables each group has chosen and their submission details.
 */
export const getGroupDeliverableSelections = <ThrowOnError extends boolean = false>(options: Options<GetGroupDeliverableSelectionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupDeliverableSelectionsResponses, GetGroupDeliverableSelectionsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects/{project_id}/group-deliverable-selections',
        ...options
    });
};

/**
 * List all student deliverable selections for a project
 * This endpoint allows admins to view all student deliverable selections for a specific project,
 * including which deliverables each student has chosen.
 */
export const getStudentDeliverableSelections = <ThrowOnError extends boolean = false>(options: Options<GetStudentDeliverableSelectionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStudentDeliverableSelectionsResponses, GetStudentDeliverableSelectionsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/projects/{project_id}/student-deliverable-selections',
        ...options
    });
};

/**
 * Get all security codes
 */
export const getAllCodesHandler = <ThrowOnError extends boolean = false>(options?: Options<GetAllCodesHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllCodesHandlerResponses, GetAllCodesHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/security-codes',
        ...options
    });
};

/**
 * Generate a unique code for a project
 * Coordinators can only create codes for projects they are assigned to. Professors/Root can create codes for any project.
 */
export const createCodeHandler = <ThrowOnError extends boolean = false>(options: Options<CreateCodeHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCodeHandlerResponses, CreateCodeHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/security-codes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all student components.
 * Returns all student components across all projects.
 */
export const getAllStudentComponentsHandler = <ThrowOnError extends boolean = false>(options?: Options<GetAllStudentComponentsHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllStudentComponentsHandlerResponses, GetAllStudentComponentsHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverable-components',
        ...options
    });
};

/**
 * Creates a new student component.
 * This endpoint allows authenticated admins to create a new student component for a specific project.
 */
export const createStudentComponentHandler = <ThrowOnError extends boolean = false>(options: Options<CreateStudentComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateStudentComponentHandlerResponses, CreateStudentComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverable-components',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all student components for a specific project.
 * Returns all student components associated with the specified project.
 */
export const getStudentComponentsForProjectHandler = <ThrowOnError extends boolean = false>(options: Options<GetStudentComponentsForProjectHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStudentComponentsForProjectHandlerResponses, GetStudentComponentsForProjectHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverable-components/project/{project_id}',
        ...options
    });
};

/**
 * Deletes a student component.
 * This endpoint allows authenticated admins to remove a student component by ID.
 */
export const deleteStudentComponentHandler = <ThrowOnError extends boolean = false>(options: Options<DeleteStudentComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteStudentComponentHandlerResponses, DeleteStudentComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverable-components/{id}',
        ...options
    });
};

/**
 * Get a specific student component by ID.
 * Returns the details of the specified student component.
 */
export const getStudentComponentHandler = <ThrowOnError extends boolean = false>(options: Options<GetStudentComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStudentComponentHandlerResponses, GetStudentComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverable-components/{id}',
        ...options
    });
};

/**
 * Updates a student component.
 * This endpoint allows authenticated admins to modify the name of a student component by ID.
 */
export const updateStudentComponentHandler = <ThrowOnError extends boolean = false>(options: Options<UpdateStudentComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateStudentComponentHandlerResponses, UpdateStudentComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverable-components/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all deliverables that use a specific student component.
 * Returns all student deliverables that use the specified component along with their quantities.
 */
export const getDeliverablesForStudentComponentHandler = <ThrowOnError extends boolean = false>(options: Options<GetDeliverablesForStudentComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDeliverablesForStudentComponentHandlerResponses, GetDeliverablesForStudentComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverable-components/{id}/deliverables',
        ...options
    });
};

/**
 * Get all student deliverables.
 * Returns all student deliverables across all projects.
 */
export const getAllStudentDeliverablesHandler = <ThrowOnError extends boolean = false>(options?: Options<GetAllStudentDeliverablesHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllStudentDeliverablesHandlerResponses, GetAllStudentDeliverablesHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables',
        ...options
    });
};

/**
 * Creates a new student deliverable.
 * This endpoint allows authenticated admins to create a new student deliverable for a specific project.
 */
export const createStudentDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<CreateStudentDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateStudentDeliverableHandlerResponses, CreateStudentDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Creates a new student deliverable-component relationship.
 * This endpoint allows authenticated admins to add components to student deliverables with specified quantities.
 */
export const createStudentDeliverableComponentHandler = <ThrowOnError extends boolean = false>(options: Options<CreateStudentDeliverableComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateStudentDeliverableComponentHandlerResponses, CreateStudentDeliverableComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables-components',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all components for a specific student deliverable.
 * Returns all components associated with the specified student deliverable along with their quantities.
 */
export const getComponentsForDeliverableHandler2 = <ThrowOnError extends boolean = false>(options: Options<GetComponentsForDeliverableHandler2Data, ThrowOnError>) => {
    return (options.client ?? client).get<GetComponentsForDeliverableHandler2Responses, GetComponentsForDeliverableHandler2Errors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables-components/components/{deliverable_id}',
        ...options
    });
};

/**
 * Get all deliverables that use a specific student component.
 * Returns all student deliverables that use the specified component along with their quantities.
 */
export const getDeliverablesForComponentHandler2 = <ThrowOnError extends boolean = false>(options: Options<GetDeliverablesForComponentHandler2Data, ThrowOnError>) => {
    return (options.client ?? client).get<GetDeliverablesForComponentHandler2Responses, GetDeliverablesForComponentHandler2Errors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables-components/deliverables/{component_id}',
        ...options
    });
};

/**
 * Removes a component from a student deliverable.
 * This endpoint allows authenticated admins to remove the relationship between a component and a student deliverable by ID.
 */
export const deleteStudentDeliverableComponentHandler = <ThrowOnError extends boolean = false>(options: Options<DeleteStudentDeliverableComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteStudentDeliverableComponentHandlerResponses, DeleteStudentDeliverableComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables-components/{id}',
        ...options
    });
};

/**
 * Updates the quantity of a component in a student deliverable.
 * This endpoint allows authenticated admins to modify the quantity of a component in a student deliverable by ID.
 */
export const updateStudentDeliverableComponentHandler = <ThrowOnError extends boolean = false>(options: Options<UpdateStudentDeliverableComponentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateStudentDeliverableComponentHandlerResponses, UpdateStudentDeliverableComponentHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables-components/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all student deliverables for a specific project.
 * Returns all student deliverables associated with the specified project.
 */
export const getStudentDeliverablesForProjectHandler = <ThrowOnError extends boolean = false>(options: Options<GetStudentDeliverablesForProjectHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStudentDeliverablesForProjectHandlerResponses, GetStudentDeliverablesForProjectHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables/project/{project_id}',
        ...options
    });
};

/**
 * Deletes a student deliverable.
 * This endpoint allows authenticated admins to remove a student deliverable by ID.
 */
export const deleteStudentDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<DeleteStudentDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteStudentDeliverableHandlerResponses, DeleteStudentDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables/{id}',
        ...options
    });
};

/**
 * Get a specific student deliverable by ID.
 * Returns the details of the specified student deliverable.
 */
export const getStudentDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<GetStudentDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStudentDeliverableHandlerResponses, GetStudentDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables/{id}',
        ...options
    });
};

/**
 * Updates a student deliverable.
 * This endpoint allows authenticated admins to modify the name of a student deliverable by ID.
 */
export const updateStudentDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<UpdateStudentDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateStudentDeliverableHandlerResponses, UpdateStudentDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all components for a specific student deliverable.
 * Returns all components associated with the specified student deliverable along with their quantities.
 */
export const getComponentsForStudentDeliverableHandler = <ThrowOnError extends boolean = false>(options: Options<GetComponentsForStudentDeliverableHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetComponentsForStudentDeliverableHandlerResponses, GetComponentsForStudentDeliverableHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/student-deliverables/{id}/components',
        ...options
    });
};

/**
 * Handler for retrieving a list of admin users
 * Returns array with all the data of the admins except passwords
 */
export const getAllAdminsHandler = <ThrowOnError extends boolean = false>(options?: Options<GetAllAdminsHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllAdminsHandlerResponses, GetAllAdminsHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/users',
        ...options
    });
};

/**
 * Creates a new admin user.
 * This endpoint allows authenticated users to create new admin accounts. Only users with the root role can create other root users.
 * A random password is automatically generated and sent to the admin via email.
 */
export const createAdminHandler = <ThrowOnError extends boolean = false>(options: Options<CreateAdminHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAdminHandlerResponses, CreateAdminHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the profile information of the currently authenticated admin.
 * This endpoint is designed to return detailed information about the admin making the request.
 * It extracts the admin's data from the request context, which should be populated by middleware
 * responsible for authentication and authorization.
 */
export const adminsMeHandler = <ThrowOnError extends boolean = false>(options?: Options<AdminsMeHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<AdminsMeHandlerResponses, AdminsMeHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/users/me',
        ...options
    });
};

/**
 * Delete an admin
 */
export const deleteAdminHandler = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminHandlerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAdminHandlerResponses, DeleteAdminHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/users/{id}',
        ...options
    });
};

/**
 * Handler for retrieving a single admin user by ID
 * Returns detailed information about a specific admin user
 * without including sensitive fields like passwords.
 */
export const getOneAdminHandler = <ThrowOnError extends boolean = false>(options: Options<GetOneAdminHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetOneAdminHandlerResponses, GetOneAdminHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/users/{id}',
        ...options
    });
};

/**
 * Updates an existing admin user.
 * This endpoint allows authenticated admins to update their own or other admin's details. Only root admins can modify roles.
 */
export const updateAdminHandler = <ThrowOnError extends boolean = false>(options: Options<UpdateAdminHandlerData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAdminHandlerResponses, UpdateAdminHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Admin-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/admins/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Confirms a student account using email verification token
 * This endpoint verifies the email confirmation token sent to the student's email
 * and activates their account by setting is_pending to false.
 */
export const confirmStudentHandler = <ThrowOnError extends boolean = false>(options: Options<ConfirmStudentHandlerData, ThrowOnError>) => {
    return (options.client ?? client).get<ConfirmStudentHandlerResponses, ConfirmStudentHandlerErrors, ThrowOnError>({
        url: '/v1/students/auth/confirm',
        ...options
    });
};

/**
 * Requests a password reset for a student account
 * This endpoint sends a password reset email to the specified email address if a student
 * account with that email exists. The email contains a secure link to reset the password.
 */
export const forgotPasswordHandler2 = <ThrowOnError extends boolean = false>(options: Options<ForgotPasswordHandler2Data, ThrowOnError>) => {
    return (options.client ?? client).post<ForgotPasswordHandler2Responses, ForgotPasswordHandler2Errors, ThrowOnError>({
        url: '/v1/students/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Authenticates a student and returns a JWT.
 * This endpoint validates user credentials and issues a JWT upon successful authentication.
 */
export const studentsLoginHandler = <ThrowOnError extends boolean = false>(options: Options<StudentsLoginHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<StudentsLoginHandlerResponses, StudentsLoginHandlerErrors, ThrowOnError>({
        url: '/v1/students/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Resets a student's password using a valid reset token
 * This endpoint validates the password reset token and updates the student's password.
 * The token is sent to the student's email via the forgot-password endpoint.
 */
export const resetPasswordHandler2 = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordHandler2Data, ThrowOnError>) => {
    return (options.client ?? client).post<ResetPasswordHandler2Responses, ResetPasswordHandler2Errors, ThrowOnError>({
        url: '/v1/students/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Creates a new student account
 * This endpoint allows students to register to the app.
 */
export const studentSignupHandler = <ThrowOnError extends boolean = false>(options: Options<StudentSignupHandlerData, ThrowOnError>) => {
    return (options.client ?? client).post<StudentSignupHandlerResponses, StudentSignupHandlerErrors, ThrowOnError>({
        url: '/v1/students/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update a student deliverable selection
 */
export const updateStudentDeliverableSelection = <ThrowOnError extends boolean = false>(options: Options<UpdateStudentDeliverableSelectionData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateStudentDeliverableSelectionResponses, UpdateStudentDeliverableSelectionErrors, ThrowOnError>({
        url: '/v1/students/deliverable-selection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a student deliverable selection (requires group membership)
 */
export const createStudentDeliverableSelection = <ThrowOnError extends boolean = false>(options: Options<CreateStudentDeliverableSelectionData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateStudentDeliverableSelectionResponses, CreateStudentDeliverableSelectionErrors, ThrowOnError>({
        url: '/v1/students/deliverable-selection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a student deliverable selection
 */
export const deleteStudentDeliverableSelection = <ThrowOnError extends boolean = false>(options: Options<DeleteStudentDeliverableSelectionData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteStudentDeliverableSelectionResponses, DeleteStudentDeliverableSelectionErrors, ThrowOnError>({
        url: '/v1/students/deliverable-selection/project/{project_id}',
        ...options
    });
};

/**
 * Get the student's deliverable selection for a project
 */
export const getStudentDeliverableSelection = <ThrowOnError extends boolean = false>(options: Options<GetStudentDeliverableSelectionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStudentDeliverableSelectionResponses, GetStudentDeliverableSelectionErrors, ThrowOnError>({
        url: '/v1/students/deliverable-selection/project/{project_id}',
        ...options
    });
};

/**
 * Get all groups where the student is a member
 * This endpoint allows authenticated students to retrieve all groups they are members of.
 */
export const getGroups = <ThrowOnError extends boolean = false>(options?: Options<GetGroupsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGroupsResponses, GetGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/groups',
        ...options
    });
};

/**
 * Create a new group for a project
 * This endpoint allows authenticated students to create a group using a valid security code.
 * The security code must be valid and not expired for the specified project.
 * Each student can only create one group per project.
 * The group creator becomes the GroupLeader automatically.
 */
export const createGroup = <ThrowOnError extends boolean = false>(options: Options<CreateGroupData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateGroupResponses, CreateGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check if a group name already exists in a project
 * This endpoint allows students to check if a group name is already taken
 * within a specific project before creating a group.
 */
export const checkName = <ThrowOnError extends boolean = false>(options: Options<CheckNameData, ThrowOnError>) => {
    return (options.client ?? client).post<CheckNameResponses, CheckNameErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/groups/check-name',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a group
 * This endpoint allows authenticated students to delete a group they lead.
 * This will also remove all group members.
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteGroupResponses, DeleteGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/groups/{group_id}',
        ...options
    });
};

/**
 * Get the deliverable selection for a group
 */
export const getGroupDeliverableSelection = <ThrowOnError extends boolean = false>(options: Options<GetGroupDeliverableSelectionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupDeliverableSelectionResponses, GetGroupDeliverableSelectionErrors, ThrowOnError>({
        url: '/v1/students/groups/{group_id}/deliverable-selection',
        ...options
    });
};

/**
 * Update the link and markdown text of a group deliverable selection (Group Leaders only)
 * Note: The deliverable choice itself cannot be changed
 */
export const updateGroupDeliverableSelection = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupDeliverableSelectionData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateGroupDeliverableSelectionResponses, UpdateGroupDeliverableSelectionErrors, ThrowOnError>({
        url: '/v1/students/groups/{group_id}/deliverable-selection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a group deliverable selection (Group Leaders only)
 */
export const createGroupDeliverableSelection = <ThrowOnError extends boolean = false>(options: Options<CreateGroupDeliverableSelectionData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateGroupDeliverableSelectionResponses, CreateGroupDeliverableSelectionErrors, ThrowOnError>({
        url: '/v1/students/groups/{group_id}/deliverable-selection',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a member from a group
 * This endpoint allows GroupLeaders to remove members from their group.
 */
export const removeMember2 = <ThrowOnError extends boolean = false>(options: Options<RemoveMember2Data, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveMember2Responses, RemoveMember2Errors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/groups/{group_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List all members of a group with their roles
 * This endpoint allows students to view all members of a group with their roles.
 * Any authenticated student can view group members.
 */
export const listGroupMembers = <ThrowOnError extends boolean = false>(options: Options<ListGroupMembersData, ThrowOnError>) => {
    return (options.client ?? client).get<ListGroupMembersResponses, ListGroupMembersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/groups/{group_id}/members',
        ...options
    });
};

/**
 * Add a member to a group
 * This endpoint allows GroupLeaders to add new members to their group.
 */
export const addMember2 = <ThrowOnError extends boolean = false>(options: Options<AddMember2Data, ThrowOnError>) => {
    return (options.client ?? client).post<AddMember2Responses, AddMember2Errors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/groups/{group_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all the projects of student with deliverables and components
 * This endpoint allows authenticated students to retrieve all the projects in which they have a role,
 * along with all deliverables and components for each project
 */
export const getStudentProjects = <ThrowOnError extends boolean = false>(options?: Options<GetStudentProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStudentProjectsResponses, GetStudentProjectsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/projects',
        ...options
    });
};

/**
 * Validate a security code and return project information
 * This endpoint allows students to validate a security code and get information about
 * the project associated with it. All security codes are for GroupLeader role.
 */
export const validateCode = <ThrowOnError extends boolean = false>(options: Options<ValidateCodeData, ThrowOnError>) => {
    return (options.client ?? client).post<ValidateCodeResponses, ValidateCodeErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/security-codes/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves the profile information of the currently authenticated student.
 * This endpoint is designed to return detailed information about the student making the request.
 * It extracts the student's data from the request context, which should be populated by middleware
 * responsible for authentication and authorization.
 */
export const studentsMeHandler = <ThrowOnError extends boolean = false>(options?: Options<StudentsMeHandlerData, ThrowOnError>) => {
    return (options?.client ?? client).get<StudentsMeHandlerResponses, StudentsMeHandlerErrors, ThrowOnError>({
        security: [
            {
                name: 'X-Student-Token',
                type: 'apiKey'
            }
        ],
        url: '/v1/students/users/me',
        ...options
    });
};

/**
 * Get application version information
 * Returns comprehensive version information including git tag, commit hash, and build details
 */
export const versionInfo = <ThrowOnError extends boolean = false>(options?: Options<VersionInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<VersionInfoResponses, unknown, ThrowOnError>({
        url: '/version',
        ...options
    });
};
