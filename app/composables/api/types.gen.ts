// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'https://dev.advancedprogramming.ovh/api' | 'http://localhost:8080/' | (string & {});
};

export type AddMemberRequest = {
    email: string;
};

export type AdminAddMemberRequest = {
    role_id: number;
    student_email: string;
};

export type AdminMemberInfo = {
    email: string;
    name: string;
    role: string;
    student_id: number;
};

export type AdminMemberResponse = {
    member?: null | AdminMemberInfo;
    message: string;
    success: boolean;
};

export type AdminResponseScheme = {
    email: string;
    first_name: string;
    id: number;
    last_name: string;
    role_id: number;
};

export type AllowedDomainsResponse = {
    /**
     * List of email domains allowed for account creation
     */
    domains: Array<string>;
};

export type AssignCoordinatorRequest = {
    admin_id: number;
};

export type AssignCoordinatorResponse = {
    coordinator: CoordinatorInfo;
    coordinator_project_id: number;
    message: string;
    project: ProjectInfo;
};

export type CheckNameRequest = {
    name: string;
    project_id: number;
};

export type CheckNameResponse = {
    exists: boolean;
};

export type ComponentDetail = {
    name: string;
    project_id: number;
    student_deliverable_component_id: number;
};

export type ComponentImplementationDetail = {
    component_name: string;
    created_at: string;
    group_deliverable_component_id: number;
    id: number;
    markdown_description: string;
    repository_link: string;
    updated_at: string;
};

export type ComponentImplementationDetailInfo = {
    component_name: string;
    created_at: string;
    group_deliverable_component_id: number;
    id: number;
    markdown_description: string;
    repository_link: string;
    updated_at: string;
};

export type ComponentImplementationDetailResponse = {
    component_name: string;
    created_at: string;
    group_deliverable_component_id: number;
    id: number;
    markdown_description: string;
    repository_link: string;
    updated_at: string;
};

export type CoordinatorDetail = {
    admin_id: number;
    assigned_at: string;
    email: string;
    first_name: string;
    last_name: string;
};

export type CoordinatorInfo = {
    admin_id: number;
    email: string;
    name: string;
};

export type CoordinatorsListResponse = {
    coordinator?: null | CoordinatorDetail;
    project_id: number;
    project_name: string;
};

export type CreateAdminResponse = {
    admin_id: number;
};

export type CreateAdminScheme = {
    admin_role_id: number;
    email: string;
    first_name: string;
    last_name: string;
};

export type CreateCodeResponse = {
    code: string;
};

export type CreateCodeScheme = {
    expiration: string;
    project_id: number;
};

export type CreateComponentImplementationDetailRequest = {
    group_deliverable_component_id: number;
    markdown_description: string;
    repository_link: string;
};

export type CreateComponentImplementationDetailResponse = {
    id: number;
    message: string;
};

export type CreateGroupComponentResponse = {
    group_deliverable_component_id: number;
    name: string;
    project_id: number;
    sellable: boolean;
};

export type CreateGroupComponentScheme = {
    name: string;
    project_id: number;
    sellable: boolean;
};

export type CreateGroupDeliverableComponentResponse = {
    group_deliverable_component_id: number;
    group_deliverable_id: number;
    id: number;
    quantity: number;
};

export type CreateGroupDeliverableComponentScheme = {
    group_deliverable_component_id: number;
    group_deliverable_id: number;
    quantity: number;
};

export type CreateGroupDeliverableResponse = {
    group_deliverable_id: number;
    name: string;
    project_id: number;
};

export type CreateGroupDeliverableScheme = {
    name: string;
    project_id: number;
};

export type CreateGroupDeliverableSelectionRequest = {
    group_deliverable_id: number;
};

export type CreateGroupDeliverableSelectionResponse = {
    group_deliverable_selection_id: number;
    message: string;
};

export type CreateGroupRequest = {
    name: string;
    security_code: string;
};

export type CreateGroupResponse = {
    group_id: number;
    name: string;
    project_id: number;
    role: string;
};

export type CreateProjectResponse = {
    project_id: number;
};

export type CreateProjectScheme = {
    active: boolean;
    deliverable_selection_deadline?: string | null;
    max_group_size: number;
    max_student_uploads: number;
    name: string;
};

export type CreateStudentComponentResponse = {
    name: string;
    project_id: number;
    student_deliverable_component_id: number;
};

export type CreateStudentComponentScheme = {
    name: string;
    project_id: number;
};

export type CreateStudentDeliverableComponentResponse = {
    id: number;
    quantity: number;
    student_deliverable_component_id: number;
    student_deliverable_id: number;
};

export type CreateStudentDeliverableComponentScheme = {
    quantity: number;
    student_deliverable_component_id: number;
    student_deliverable_id: number;
};

export type CreateStudentDeliverableResponse = {
    name: string;
    project_id: number;
    student_deliverable_id: number;
};

export type CreateStudentDeliverableScheme = {
    name: string;
    project_id: number;
};

export type CreateStudentDeliverableSelectionRequest = {
    project_id: number;
    student_deliverable_id: number;
};

export type CreateStudentDeliverableSelectionResponse = {
    message: string;
    student_deliverable_selection_id: number;
};

export type DatabaseStatus = {
    error?: string | null;
    status: string;
};

export type DeleteCodeResponse = {
    message: string;
};

export type DeleteComponentImplementationDetailRequest = {
    group_deliverable_component_id: number;
};

export type DeleteComponentImplementationDetailResponse = {
    message: string;
};

export type DeleteGroupResponse = {
    message: string;
};

export type DeleteStudentDeliverableSelectionResponse = {
    message: string;
};

export type DeliverableInfo = {
    group_deliverable_id: number;
    name: string;
};

/**
 * Request body for requesting a password reset
 */
export type ForgotPasswordSchema = {
    /**
     * The email address of the admin account
     */
    email: string;
};

export type GetAllAdminsResponse = {
    admins: Array<AdminResponseScheme>;
};

export type GetAllCodesResponse = {
    codes: Array<SecurityCodeWithNames>;
};

export type GetAllGroupComponentsResponse = {
    components: Array<GroupComponentResponse>;
};

export type GetAllGroupDeliverablesResponse = {
    deliverables: Array<GroupDeliverableResponse>;
};

export type GetAllProjectsResponse = {
    projects: Array<Project>;
};

export type GetAllStudentComponentsResponse = {
    components: Array<StudentComponentResponse>;
};

export type GetAllStudentDeliverablesResponse = {
    deliverables: Array<StudentDeliverableResponse>;
};

export type GetComponentImplementationDetailsResponse = {
    details: Array<ComponentImplementationDetailResponse>;
};

export type GetComponentsForDeliverableResponse = {
    components: Array<StudentDeliverableComponentResponse>;
};

export type GetComponentsForGroupDeliverableResponse = {
    components: Array<GroupDeliverableComponentResponse>;
};

export type GetComponentsForStudentDeliverableResponse = {
    components: Array<StudentDeliverableComponentResponse>;
};

export type GetDeliverablesForComponentResponse = {
    deliverables: Array<StudentDeliverableComponentResponse>;
};

export type GetDeliverablesForGroupComponentResponse = {
    deliverables: Array<GroupComponentDeliverableResponse>;
};

export type GetDeliverablesForStudentComponentResponse = {
    deliverables: Array<StudentComponentDeliverableResponse>;
};

export type GetGroupComponentsForProjectResponse = {
    components: Array<GroupComponentResponse>;
};

export type GetGroupDeliverablesForProjectResponse = {
    deliverables: Array<GroupDeliverableResponse>;
};

export type GetGroupsResponse = {
    groups: Array<GroupWithProject>;
};

export type GetMeStudentResponse = {
    email: string;
    first_name: string;
    id: number;
    last_name: string;
    university_id: number;
};

export type GetStudentComponentsForProjectResponse = {
    components: Array<StudentComponentResponse>;
};

export type GetStudentDeliverablesForProjectResponse = {
    deliverables: Array<StudentDeliverableResponse>;
};

export type GetStudentProjects = {
    projects: Array<ProjectWithDetails>;
};

export type Group = {
    created_at: string;
    group_id: number;
    name: string;
    project_id: number;
};

export type GroupComponentDeliverableResponse = {
    deliverable_name: string;
    group_deliverable_component_id: number;
    group_deliverable_id: number;
    quantity: number;
};

export type GroupComponentResponse = {
    group_deliverable_component_id: number;
    name: string;
    project_id: number;
    sellable: boolean;
};

export type GroupDeliverable = {
    group_deliverable_id: number;
    name: string;
    project_id: number;
};

export type GroupDeliverableComponent = {
    group_deliverable_component_id: number;
    name: string;
    project_id: number;
    sellable: boolean;
};

export type GroupDeliverableComponentResponse = {
    component_name: string;
    deliverable_name: string;
    group_deliverable_component_id: number;
    group_deliverable_id: number;
    id: number;
    quantity: number;
};

export type GroupDeliverableDetail = {
    component_implementation_details: Array<ComponentImplementationDetailInfo>;
    group_deliverable_id: number;
    name: string;
};

export type GroupDeliverableResponse = {
    group_deliverable_id: number;
    name: string;
    project_id: number;
};

export type GroupDeliverableSelectionResponse = {
    component_implementation_details: Array<ComponentImplementationDetail>;
    group_deliverable_id: number;
    group_deliverable_name: string;
    group_deliverable_selection_id: number;
    group_id: number;
};

export type GroupDeliverableSelectionsResponse = {
    project_id: number;
    project_name: string;
    selections: Array<GroupSelectionInfo>;
};

export type GroupDetailsResponse = {
    deliverable_selection?: null | GroupDeliverableDetail;
    group_id: number;
    members: Array<GroupMemberDetail>;
    name: string;
    project_id: number;
    project_name: string;
};

export type GroupInfo = {
    deliverable_selected?: null | DeliverableInfo;
    group_id: number;
    group_leader: GroupLeaderInfo;
    member_count: number;
    name: string;
    time_expired: boolean;
};

export type GroupLeaderInfo = {
    email: string;
    name: string;
    student_id: number;
};

export type GroupMemberDetail = {
    email: string;
    first_name: string;
    last_name: string;
    role: string;
    student_deliverable_selection?: null | StudentDeliverableSelectionDetail;
    student_id: number;
    university_id: number;
};

export type GroupMemberInfo = {
    email: string;
    first_name: string;
    last_name: string;
    role_id: number;
    role_name: string;
    student_id: number;
};

export type GroupMembersResponse = {
    group_id: number;
    group_name: string;
    members: Array<GroupMemberInfo>;
};

export type GroupSelectionInfo = {
    component_implementation_details: Array<ComponentImplementationDetailInfo>;
    group_deliverable_id: number;
    group_deliverable_name: string;
    group_deliverable_selection_id: number;
    group_id: number;
    group_name: string;
};

export type GroupWithProject = {
    group: Group;
    project: Project;
};

export type HealthResponse = {
    database: DatabaseStatus;
    status: string;
    timestamp: number;
    uptime_seconds: number;
    version: string;
};

/**
 * Custom error type for generating JSON error responses
 *
 * - `error`: Human-readable error message
 * - `log_id`: Unique identifier for the log entry (for frontend tracking)
 * - `status`: HTTP status code (not included in JSON response)
 *
 * Used to standardize error responses across the API
 */
export type JsonError = {
    error: string;
    log_id?: string | null;
};

export type LeaderChangeInfo = {
    name: string;
    status: string;
    student_id: number;
};

/**
 * Represents the response structure for a successful login.
 *
 * This struct includes a JWT token that can be used for later authenticated requests.
 */
export type LoginAdminsResponse = {
    /**
     * JSON Web Token (JWT) to be used for authentication in later requests.
     */
    token: string;
};

/**
 * Represents data needed for login
 */
export type LoginAdminsSchema = {
    email: string;
    password: string;
};

/**
 * Represents the response structure for a successful login.
 *
 * This struct includes a JWT token that can be used for later authenticated requests.
 */
export type LoginStudentsResponse = {
    /**
     * JSON Web Token (JWT) to be used for authentication in later requests.
     */
    token: string;
};

/**
 * Represents data needed for login
 */
export type LoginStudentsSchema = {
    email: string;
    password: string;
};

export type MemberInfo = {
    email: string;
    first_name: string;
    last_name: string;
    role: string;
    student_id: number;
};

export type Project = {
    active: boolean;
    deliverable_selection_deadline?: string | null;
    max_group_size: number;
    max_student_uploads: number;
    name: string;
    project_id: number;
    year: number;
};

export type ProjectDetailsResponse = {
    group_components: Array<GroupDeliverableComponent>;
    group_deliverables: Array<GroupDeliverable>;
    project: Project;
    student_components: Array<StudentDeliverableComponent>;
    student_deliverables: Array<StudentDeliverable>;
};

export type ProjectGroupsResponse = {
    groups: Array<GroupInfo>;
};

export type ProjectInfo = {
    name: string;
    project_id: number;
    year: number;
};

export type ProjectWithDetails = {
    group_components: Array<GroupDeliverableComponent>;
    group_deliverables: Array<GroupDeliverable>;
    project: Project;
    student_components: Array<StudentDeliverableComponent>;
    student_deliverables: Array<StudentDeliverable>;
};

export type RemoveCoordinatorResponse = {
    message: string;
};

export type RemoveMemberRequest = {
    student_id: number;
};

/**
 * Request body for resetting a password
 */
export type ResetPasswordSchema = {
    /**
     * The new password for the admin account
     */
    new_password: string;
};

export type SecurityCodeWithNames = {
    code: string;
    expiration: string;
    project_id: number;
    project_name: string;
    security_code_id: number;
};

export type StudentComponentDeliverableResponse = {
    deliverable_name: string;
    id: number;
    quantity: number;
    student_deliverable_component_id: number;
    student_deliverable_id: number;
};

export type StudentComponentResponse = {
    name: string;
    project_id: number;
    student_deliverable_component_id: number;
};

export type StudentDeliverable = {
    name: string;
    project_id: number;
    student_deliverable_id: number;
};

export type StudentDeliverableComponent = {
    name: string;
    project_id: number;
    student_deliverable_component_id: number;
};

export type StudentDeliverableComponentResponse = {
    component_name: string;
    deliverable_name: string;
    id: number;
    quantity: number;
    student_deliverable_component_id: number;
    student_deliverable_id: number;
};

export type StudentDeliverableResponse = {
    name: string;
    project_id: number;
    student_deliverable_id: number;
};

export type StudentDeliverableSelectionDetail = {
    components: Array<ComponentDetail>;
    student_deliverable_id: number;
    student_deliverable_name: string;
};

export type StudentDeliverableSelectionResponse = {
    project_id: number;
    student_deliverable_id: number;
    student_deliverable_name: string;
    student_deliverable_selection_id: number;
    student_id: number;
};

export type StudentDeliverableSelectionsResponse = {
    project_id: number;
    project_name: string;
    selections: Array<StudentSelectionInfo>;
};

export type StudentSelectionInfo = {
    student_deliverable_id: number;
    student_deliverable_name: string;
    student_deliverable_selection_id: number;
    student_email: string;
    student_id: number;
    student_name: string;
};

export type StudentSignupResponse = {
    student_id: number;
};

export type StudentSignupScheme = {
    email: string;
    first_name: string;
    last_name: string;
    password: string;
    university_id: number;
};

export type TransferLeadershipRequest = {
    new_leader_student_id: number;
    remove_old_leader: boolean;
};

export type TransferLeadershipResponse = {
    message: string;
    new_leader: LeaderChangeInfo;
    old_leader?: null | LeaderChangeInfo;
};

export type UpdateAdminScheme = {
    email?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    password?: string | null;
};

export type UpdateCodeResponse = {
    code: string;
    expiration: string;
    project_id: number;
    security_code_id: number;
};

export type UpdateCodeScheme = {
    code?: string | null;
    expiration: string;
};

export type UpdateComponentImplementationDetailRequest = {
    group_deliverable_component_id: number;
    markdown_description: string;
    repository_link: string;
};

export type UpdateComponentImplementationDetailResponse = {
    message: string;
};

export type UpdateGroupComponentScheme = {
    name: string;
    sellable: boolean;
};

export type UpdateGroupDeliverableComponentScheme = {
    quantity: number;
};

export type UpdateGroupDeliverableScheme = {
    name: string;
};

export type UpdateMeAdminScheme = {
    email?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    old_password: string;
    password?: string | null;
};

export type UpdateMeStudentScheme = {
    email?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    old_password: string;
    password?: string | null;
    university_id?: number | null;
};

export type UpdateProjectScheme = {
    active?: boolean | null;
    max_group_size?: number | null;
    max_student_uploads?: number | null;
    name?: string | null;
};

export type UpdateStudentComponentScheme = {
    name: string;
};

export type UpdateStudentDeliverableComponentScheme = {
    quantity: number;
};

export type UpdateStudentDeliverableScheme = {
    name: string;
};

export type UpdateStudentDeliverableSelectionRequest = {
    project_id: number;
    student_deliverable_id: number;
};

export type UpdateStudentDeliverableSelectionResponse = {
    message: string;
};

export type ValidateCodeRequest = {
    security_code: string;
};

export type ValidateCodeResponse = {
    is_valid: boolean;
    project?: null | ProjectInfo;
};

export type VersionResponse = {
    build_time: string;
    git_commit: string;
    git_tag: string;
    rust_version: string;
    timestamp: number;
    version: string;
};

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckErrors = {
    /**
     * Application is unhealthy
     */
    503: HealthResponse;
};

export type HealthCheckError = HealthCheckErrors[keyof HealthCheckErrors];

export type HealthCheckResponses = {
    /**
     * Application is healthy
     */
    200: HealthResponse;
};

export type HealthCheckResponse = HealthCheckResponses[keyof HealthCheckResponses];

export type LivenessCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/live';
};

export type LivenessCheckResponses = {
    /**
     * Service is alive
     */
    200: unknown;
};

export type ForgotPasswordHandlerData = {
    body: ForgotPasswordSchema;
    path?: never;
    query?: never;
    url: '/v1/admins/auth/forgot-password';
};

export type ForgotPasswordHandlerErrors = {
    /**
     * Internal server error
     */
    500: JsonError;
};

export type ForgotPasswordHandlerError = ForgotPasswordHandlerErrors[keyof ForgotPasswordHandlerErrors];

export type ForgotPasswordHandlerResponses = {
    /**
     * Password reset email sent successfully or email doesn't exist
     */
    204: void;
};

export type ForgotPasswordHandlerResponse = ForgotPasswordHandlerResponses[keyof ForgotPasswordHandlerResponses];

export type AdminsLoginHandlerData = {
    body: LoginAdminsSchema;
    path?: never;
    query?: never;
    url: '/v1/admins/auth/login';
};

export type AdminsLoginHandlerErrors = {
    /**
     * Wrong credentials
     */
    401: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type AdminsLoginHandlerError = AdminsLoginHandlerErrors[keyof AdminsLoginHandlerErrors];

export type AdminsLoginHandlerResponses = {
    /**
     * Login successful
     */
    200: LoginAdminsResponse;
};

export type AdminsLoginHandlerResponse = AdminsLoginHandlerResponses[keyof AdminsLoginHandlerResponses];

export type ResetPasswordHandlerData = {
    body: ResetPasswordSchema;
    path?: never;
    query: {
        /**
         * Password reset token from email
         */
        t: string;
    };
    url: '/v1/admins/auth/reset-password';
};

export type ResetPasswordHandlerErrors = {
    /**
     * Invalid or expired token
     */
    400: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type ResetPasswordHandlerError = ResetPasswordHandlerErrors[keyof ResetPasswordHandlerErrors];

export type ResetPasswordHandlerResponses = {
    /**
     * Password reset successfully
     */
    204: void;
};

export type ResetPasswordHandlerResponse = ResetPasswordHandlerResponses[keyof ResetPasswordHandlerResponses];

export type GetAllGroupComponentsHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/admins/group-deliverable-components';
};

export type GetAllGroupComponentsHandlerErrors = {
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetAllGroupComponentsHandlerError = GetAllGroupComponentsHandlerErrors[keyof GetAllGroupComponentsHandlerErrors];

export type GetAllGroupComponentsHandlerResponses = {
    /**
     * Found all group components
     */
    200: GetAllGroupComponentsResponse;
};

export type GetAllGroupComponentsHandlerResponse = GetAllGroupComponentsHandlerResponses[keyof GetAllGroupComponentsHandlerResponses];

export type CreateGroupComponentHandlerData = {
    body: CreateGroupComponentScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/group-deliverable-components';
};

export type CreateGroupComponentHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Deliverable component with this name already exists for the project
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type CreateGroupComponentHandlerError = CreateGroupComponentHandlerErrors[keyof CreateGroupComponentHandlerErrors];

export type CreateGroupComponentHandlerResponses = {
    /**
     * Group deliverable component created successfully
     */
    200: CreateGroupComponentResponse;
};

export type CreateGroupComponentHandlerResponse = CreateGroupComponentHandlerResponses[keyof CreateGroupComponentHandlerResponses];

export type GetGroupComponentsForProjectHandlerData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverable-components/project/{project_id}';
};

export type GetGroupComponentsForProjectHandlerErrors = {
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetGroupComponentsForProjectHandlerError = GetGroupComponentsForProjectHandlerErrors[keyof GetGroupComponentsForProjectHandlerErrors];

export type GetGroupComponentsForProjectHandlerResponses = {
    /**
     * Found group components for project
     */
    200: GetGroupComponentsForProjectResponse;
};

export type GetGroupComponentsForProjectHandlerResponse = GetGroupComponentsForProjectHandlerResponses[keyof GetGroupComponentsForProjectHandlerResponses];

export type DeleteGroupComponentHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverable-components/{id}';
};

export type DeleteGroupComponentHandlerErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Group component not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type DeleteGroupComponentHandlerError = DeleteGroupComponentHandlerErrors[keyof DeleteGroupComponentHandlerErrors];

export type DeleteGroupComponentHandlerResponses = {
    /**
     * Group component deleted successfully
     */
    200: unknown;
};

export type GetGroupComponentHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverable-components/{id}';
};

export type GetGroupComponentHandlerErrors = {
    /**
     * Group component not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetGroupComponentHandlerError = GetGroupComponentHandlerErrors[keyof GetGroupComponentHandlerErrors];

export type GetGroupComponentHandlerResponses = {
    /**
     * Found group component
     */
    200: GroupComponentResponse;
};

export type GetGroupComponentHandlerResponse = GetGroupComponentHandlerResponses[keyof GetGroupComponentHandlerResponses];

export type UpdateGroupComponentHandlerData = {
    body: UpdateGroupComponentScheme;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverable-components/{id}';
};

export type UpdateGroupComponentHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Group component not found
     */
    404: JsonError;
    /**
     * Component with this name already exists for the project
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateGroupComponentHandlerError = UpdateGroupComponentHandlerErrors[keyof UpdateGroupComponentHandlerErrors];

export type UpdateGroupComponentHandlerResponses = {
    /**
     * Component updated successfully
     */
    200: unknown;
};

export type GetDeliverablesForGroupComponentHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverable-components/{id}/deliverables';
};

export type GetDeliverablesForGroupComponentHandlerErrors = {
    /**
     * Group component not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetDeliverablesForGroupComponentHandlerError = GetDeliverablesForGroupComponentHandlerErrors[keyof GetDeliverablesForGroupComponentHandlerErrors];

export type GetDeliverablesForGroupComponentHandlerResponses = {
    /**
     * Found deliverables for group component
     */
    200: GetDeliverablesForGroupComponentResponse;
};

export type GetDeliverablesForGroupComponentHandlerResponse = GetDeliverablesForGroupComponentHandlerResponses[keyof GetDeliverablesForGroupComponentHandlerResponses];

export type GetAllGroupDeliverablesHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/admins/group-deliverables';
};

export type GetAllGroupDeliverablesHandlerErrors = {
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetAllGroupDeliverablesHandlerError = GetAllGroupDeliverablesHandlerErrors[keyof GetAllGroupDeliverablesHandlerErrors];

export type GetAllGroupDeliverablesHandlerResponses = {
    /**
     * Found all group deliverables
     */
    200: GetAllGroupDeliverablesResponse;
};

export type GetAllGroupDeliverablesHandlerResponse = GetAllGroupDeliverablesHandlerResponses[keyof GetAllGroupDeliverablesHandlerResponses];

export type CreateGroupDeliverableHandlerData = {
    body: CreateGroupDeliverableScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/group-deliverables';
};

export type CreateGroupDeliverableHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Deliverable with this name already exists for the project
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type CreateGroupDeliverableHandlerError = CreateGroupDeliverableHandlerErrors[keyof CreateGroupDeliverableHandlerErrors];

export type CreateGroupDeliverableHandlerResponses = {
    /**
     * Group deliverable created successfully
     */
    200: CreateGroupDeliverableResponse;
};

export type CreateGroupDeliverableHandlerResponse = CreateGroupDeliverableHandlerResponses[keyof CreateGroupDeliverableHandlerResponses];

export type CreateGroupDeliverableComponentHandlerData = {
    body: CreateGroupDeliverableComponentScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/group-deliverables-components';
};

export type CreateGroupDeliverableComponentHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Relationship already exists
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type CreateGroupDeliverableComponentHandlerError = CreateGroupDeliverableComponentHandlerErrors[keyof CreateGroupDeliverableComponentHandlerErrors];

export type CreateGroupDeliverableComponentHandlerResponses = {
    /**
     * Group deliverable-component relationship created successfully
     */
    200: CreateGroupDeliverableComponentResponse;
};

export type CreateGroupDeliverableComponentHandlerResponse = CreateGroupDeliverableComponentHandlerResponses[keyof CreateGroupDeliverableComponentHandlerResponses];

export type GetComponentsForDeliverableHandlerData = {
    body?: never;
    path: {
        deliverable_id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverables-components/components/{deliverable_id}';
};

export type GetComponentsForDeliverableHandlerErrors = {
    /**
     * Group deliverable not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetComponentsForDeliverableHandlerError = GetComponentsForDeliverableHandlerErrors[keyof GetComponentsForDeliverableHandlerErrors];

export type GetComponentsForDeliverableHandlerResponses = {
    /**
     * Found components for group deliverable
     */
    200: GetComponentsForDeliverableResponse;
};

export type GetComponentsForDeliverableHandlerResponse = GetComponentsForDeliverableHandlerResponses[keyof GetComponentsForDeliverableHandlerResponses];

export type GetDeliverablesForComponentHandlerData = {
    body?: never;
    path: {
        component_id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverables-components/deliverables/{component_id}';
};

export type GetDeliverablesForComponentHandlerErrors = {
    /**
     * Group deliverable component not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetDeliverablesForComponentHandlerError = GetDeliverablesForComponentHandlerErrors[keyof GetDeliverablesForComponentHandlerErrors];

export type GetDeliverablesForComponentHandlerResponses = {
    /**
     * Found deliverables for group component
     */
    200: GetDeliverablesForComponentResponse;
};

export type GetDeliverablesForComponentHandlerResponse = GetDeliverablesForComponentHandlerResponses[keyof GetDeliverablesForComponentHandlerResponses];

export type DeleteGroupDeliverableComponentHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverables-components/{id}';
};

export type DeleteGroupDeliverableComponentHandlerErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Relationship not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type DeleteGroupDeliverableComponentHandlerError = DeleteGroupDeliverableComponentHandlerErrors[keyof DeleteGroupDeliverableComponentHandlerErrors];

export type DeleteGroupDeliverableComponentHandlerResponses = {
    /**
     * Group deliverable component relationship deleted successfully
     */
    200: unknown;
};

export type UpdateGroupDeliverableComponentHandlerData = {
    body: UpdateGroupDeliverableComponentScheme;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverables-components/{id}';
};

export type UpdateGroupDeliverableComponentHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Relationship not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateGroupDeliverableComponentHandlerError = UpdateGroupDeliverableComponentHandlerErrors[keyof UpdateGroupDeliverableComponentHandlerErrors];

export type UpdateGroupDeliverableComponentHandlerResponses = {
    /**
     * Group deliverable component relationship updated successfully
     */
    200: unknown;
};

export type GetGroupDeliverablesForProjectHandlerData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverables/project/{project_id}';
};

export type GetGroupDeliverablesForProjectHandlerErrors = {
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetGroupDeliverablesForProjectHandlerError = GetGroupDeliverablesForProjectHandlerErrors[keyof GetGroupDeliverablesForProjectHandlerErrors];

export type GetGroupDeliverablesForProjectHandlerResponses = {
    /**
     * Found group deliverables for project
     */
    200: GetGroupDeliverablesForProjectResponse;
};

export type GetGroupDeliverablesForProjectHandlerResponse = GetGroupDeliverablesForProjectHandlerResponses[keyof GetGroupDeliverablesForProjectHandlerResponses];

export type DeleteGroupDeliverableHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverables/{id}';
};

export type DeleteGroupDeliverableHandlerErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Group deliverable not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type DeleteGroupDeliverableHandlerError = DeleteGroupDeliverableHandlerErrors[keyof DeleteGroupDeliverableHandlerErrors];

export type DeleteGroupDeliverableHandlerResponses = {
    /**
     * Group deliverable deleted successfully
     */
    200: unknown;
};

export type GetGroupDeliverableHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverables/{id}';
};

export type GetGroupDeliverableHandlerErrors = {
    /**
     * Group deliverable not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetGroupDeliverableHandlerError = GetGroupDeliverableHandlerErrors[keyof GetGroupDeliverableHandlerErrors];

export type GetGroupDeliverableHandlerResponses = {
    /**
     * Found group deliverable
     */
    200: GroupDeliverableResponse;
};

export type GetGroupDeliverableHandlerResponse = GetGroupDeliverableHandlerResponses[keyof GetGroupDeliverableHandlerResponses];

export type UpdateGroupDeliverableHandlerData = {
    body: UpdateGroupDeliverableScheme;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverables/{id}';
};

export type UpdateGroupDeliverableHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Group deliverable not found
     */
    404: JsonError;
    /**
     * Deliverable with this name already exists for the project
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateGroupDeliverableHandlerError = UpdateGroupDeliverableHandlerErrors[keyof UpdateGroupDeliverableHandlerErrors];

export type UpdateGroupDeliverableHandlerResponses = {
    /**
     * Group deliverable updated successfully
     */
    200: unknown;
};

export type GetComponentsForGroupDeliverableHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/group-deliverables/{id}/components';
};

export type GetComponentsForGroupDeliverableHandlerErrors = {
    /**
     * Group deliverable not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetComponentsForGroupDeliverableHandlerError = GetComponentsForGroupDeliverableHandlerErrors[keyof GetComponentsForGroupDeliverableHandlerErrors];

export type GetComponentsForGroupDeliverableHandlerResponses = {
    /**
     * Found components for group deliverable
     */
    200: GetComponentsForGroupDeliverableResponse;
};

export type GetComponentsForGroupDeliverableHandlerResponse = GetComponentsForGroupDeliverableHandlerResponses[keyof GetComponentsForGroupDeliverableHandlerResponses];

export type GetProjectGroupsData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/admins/groups/projects/{project_id}';
};

export type GetProjectGroupsErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetProjectGroupsError = GetProjectGroupsErrors[keyof GetProjectGroupsErrors];

export type GetProjectGroupsResponses = {
    /**
     * Project groups list
     */
    200: ProjectGroupsResponse;
};

export type GetProjectGroupsResponse = GetProjectGroupsResponses[keyof GetProjectGroupsResponses];

export type GetGroupDetailsData = {
    body?: never;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/admins/groups/{group_id}';
};

export type GetGroupDetailsErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Group not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetGroupDetailsError = GetGroupDetailsErrors[keyof GetGroupDetailsErrors];

export type GetGroupDetailsResponses = {
    /**
     * Detailed group information
     */
    200: GroupDetailsResponse;
};

export type GetGroupDetailsResponse = GetGroupDetailsResponses[keyof GetGroupDetailsResponses];

export type TransferLeadershipData = {
    body: TransferLeadershipRequest;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/admins/groups/{group_id}/leader';
};

export type TransferLeadershipErrors = {
    /**
     * Invalid request data
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Group or member not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type TransferLeadershipError = TransferLeadershipErrors[keyof TransferLeadershipErrors];

export type TransferLeadershipResponses = {
    /**
     * Group leader updated successfully
     */
    200: TransferLeadershipResponse;
};

export type TransferLeadershipResponse2 = TransferLeadershipResponses[keyof TransferLeadershipResponses];

export type AddMemberData = {
    body: AdminAddMemberRequest;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/admins/groups/{group_id}/members';
};

export type AddMemberErrors = {
    /**
     * Invalid request data or business rule violation
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Group or student not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type AddMemberError = AddMemberErrors[keyof AddMemberErrors];

export type AddMemberResponses = {
    /**
     * Member added successfully
     */
    201: AdminMemberResponse;
};

export type AddMemberResponse = AddMemberResponses[keyof AddMemberResponses];

export type RemoveMemberData = {
    body?: never;
    path: {
        group_id: number;
        student_id: number;
    };
    query?: never;
    url: '/v1/admins/groups/{group_id}/members/{student_id}';
};

export type RemoveMemberErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Group or member not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type RemoveMemberError = RemoveMemberErrors[keyof RemoveMemberErrors];

export type RemoveMemberResponses = {
    /**
     * Member removed successfully
     */
    200: AdminMemberResponse;
};

export type RemoveMemberResponse = RemoveMemberResponses[keyof RemoveMemberResponses];

export type GetAllProjectsHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/admins/projects';
};

export type GetAllProjectsHandlerErrors = {
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetAllProjectsHandlerError = GetAllProjectsHandlerErrors[keyof GetAllProjectsHandlerErrors];

export type GetAllProjectsHandlerResponses = {
    /**
     * Found projects
     */
    200: GetAllProjectsResponse;
};

export type GetAllProjectsHandlerResponse = GetAllProjectsHandlerResponses[keyof GetAllProjectsHandlerResponses];

export type CreateProjectHandlerData = {
    body: CreateProjectScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/projects';
};

export type CreateProjectHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type CreateProjectHandlerError = CreateProjectHandlerErrors[keyof CreateProjectHandlerErrors];

export type CreateProjectHandlerResponses = {
    /**
     * Project created successfully
     */
    201: CreateProjectResponse;
};

export type CreateProjectHandlerResponse = CreateProjectHandlerResponses[keyof CreateProjectHandlerResponses];

export type DeleteProjectHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/projects/{id}';
};

export type DeleteProjectHandlerErrors = {
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type DeleteProjectHandlerError = DeleteProjectHandlerErrors[keyof DeleteProjectHandlerErrors];

export type DeleteProjectHandlerResponses = {
    /**
     * Project deleted successfully
     */
    200: unknown;
};

export type GetOneProjectHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/projects/{id}';
};

export type GetOneProjectHandlerErrors = {
    /**
     * Access denied
     */
    403: JsonError;
    /**
     * project not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetOneProjectHandlerError = GetOneProjectHandlerErrors[keyof GetOneProjectHandlerErrors];

export type GetOneProjectHandlerResponses = {
    /**
     * Found project with deliverables and components
     */
    200: ProjectDetailsResponse;
};

export type GetOneProjectHandlerResponse = GetOneProjectHandlerResponses[keyof GetOneProjectHandlerResponses];

export type UpdateProjectHandlerData = {
    body: UpdateProjectScheme;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/projects/{id}';
};

export type UpdateProjectHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateProjectHandlerError = UpdateProjectHandlerErrors[keyof UpdateProjectHandlerErrors];

export type UpdateProjectHandlerResponses = {
    /**
     * Project updated successfully
     */
    200: unknown;
};

export type ListCoordinatorsData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/admins/projects/{project_id}/coordinators';
};

export type ListCoordinatorsErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type ListCoordinatorsError = ListCoordinatorsErrors[keyof ListCoordinatorsErrors];

export type ListCoordinatorsResponses = {
    /**
     * List of coordinators for the project
     */
    200: CoordinatorsListResponse;
};

export type ListCoordinatorsResponse = ListCoordinatorsResponses[keyof ListCoordinatorsResponses];

export type AssignCoordinatorData = {
    body: AssignCoordinatorRequest;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/admins/projects/{project_id}/coordinators';
};

export type AssignCoordinatorErrors = {
    /**
     * Invalid request or business rule violation
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Project or admin not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type AssignCoordinatorError = AssignCoordinatorErrors[keyof AssignCoordinatorErrors];

export type AssignCoordinatorResponses = {
    /**
     * Coordinator assigned successfully
     */
    201: AssignCoordinatorResponse;
};

export type AssignCoordinatorResponse2 = AssignCoordinatorResponses[keyof AssignCoordinatorResponses];

export type RemoveCoordinatorData = {
    body?: never;
    path: {
        project_id: number;
        admin_id: number;
    };
    query?: never;
    url: '/v1/admins/projects/{project_id}/coordinators/{admin_id}';
};

export type RemoveCoordinatorErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Project or assignment not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type RemoveCoordinatorError = RemoveCoordinatorErrors[keyof RemoveCoordinatorErrors];

export type RemoveCoordinatorResponses = {
    /**
     * Coordinator removed successfully
     */
    200: RemoveCoordinatorResponse;
};

export type RemoveCoordinatorResponse2 = RemoveCoordinatorResponses[keyof RemoveCoordinatorResponses];

export type GetGroupDeliverableSelectionsData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/admins/projects/{project_id}/group-deliverable-selections';
};

export type GetGroupDeliverableSelectionsErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetGroupDeliverableSelectionsError = GetGroupDeliverableSelectionsErrors[keyof GetGroupDeliverableSelectionsErrors];

export type GetGroupDeliverableSelectionsResponses = {
    /**
     * List of group deliverable selections
     */
    200: GroupDeliverableSelectionsResponse;
};

export type GetGroupDeliverableSelectionsResponse = GetGroupDeliverableSelectionsResponses[keyof GetGroupDeliverableSelectionsResponses];

export type GetStudentDeliverableSelectionsData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/admins/projects/{project_id}/student-deliverable-selections';
};

export type GetStudentDeliverableSelectionsErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetStudentDeliverableSelectionsError = GetStudentDeliverableSelectionsErrors[keyof GetStudentDeliverableSelectionsErrors];

export type GetStudentDeliverableSelectionsResponses = {
    /**
     * List of student deliverable selections
     */
    200: StudentDeliverableSelectionsResponse;
};

export type GetStudentDeliverableSelectionsResponse = GetStudentDeliverableSelectionsResponses[keyof GetStudentDeliverableSelectionsResponses];

export type GetAllCodesHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/admins/security-codes';
};

export type GetAllCodesHandlerErrors = {
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetAllCodesHandlerError = GetAllCodesHandlerErrors[keyof GetAllCodesHandlerErrors];

export type GetAllCodesHandlerResponses = {
    /**
     * Found codes
     */
    200: GetAllCodesResponse;
};

export type GetAllCodesHandlerResponse = GetAllCodesHandlerResponses[keyof GetAllCodesHandlerResponses];

export type CreateCodeHandlerData = {
    body: CreateCodeScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/security-codes';
};

export type CreateCodeHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Access denied
     */
    403: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type CreateCodeHandlerError = CreateCodeHandlerErrors[keyof CreateCodeHandlerErrors];

export type CreateCodeHandlerResponses = {
    /**
     * Code created successfully
     */
    201: CreateCodeResponse;
};

export type CreateCodeHandlerResponse = CreateCodeHandlerResponses[keyof CreateCodeHandlerResponses];

export type DeleteCodeHandlerData = {
    body?: never;
    path: {
        security_code_id: number;
    };
    query?: never;
    url: '/v1/admins/security-codes/{security_code_id}';
};

export type DeleteCodeHandlerErrors = {
    /**
     * Access denied
     */
    403: JsonError;
    /**
     * Security code not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type DeleteCodeHandlerError = DeleteCodeHandlerErrors[keyof DeleteCodeHandlerErrors];

export type DeleteCodeHandlerResponses = {
    /**
     * Code deleted successfully
     */
    200: DeleteCodeResponse;
};

export type DeleteCodeHandlerResponse = DeleteCodeHandlerResponses[keyof DeleteCodeHandlerResponses];

export type UpdateCodeHandlerData = {
    body: UpdateCodeScheme;
    path: {
        security_code_id: number;
    };
    query?: never;
    url: '/v1/admins/security-codes/{security_code_id}';
};

export type UpdateCodeHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Access denied
     */
    403: JsonError;
    /**
     * Security code not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type UpdateCodeHandlerError = UpdateCodeHandlerErrors[keyof UpdateCodeHandlerErrors];

export type UpdateCodeHandlerResponses = {
    /**
     * Code updated successfully
     */
    200: UpdateCodeResponse;
};

export type UpdateCodeHandlerResponse = UpdateCodeHandlerResponses[keyof UpdateCodeHandlerResponses];

export type GetAllStudentComponentsHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/admins/student-deliverable-components';
};

export type GetAllStudentComponentsHandlerErrors = {
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetAllStudentComponentsHandlerError = GetAllStudentComponentsHandlerErrors[keyof GetAllStudentComponentsHandlerErrors];

export type GetAllStudentComponentsHandlerResponses = {
    /**
     * Found all student components
     */
    200: GetAllStudentComponentsResponse;
};

export type GetAllStudentComponentsHandlerResponse = GetAllStudentComponentsHandlerResponses[keyof GetAllStudentComponentsHandlerResponses];

export type CreateStudentComponentHandlerData = {
    body: CreateStudentComponentScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/student-deliverable-components';
};

export type CreateStudentComponentHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Deliverable component with this name already exists for the project
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type CreateStudentComponentHandlerError = CreateStudentComponentHandlerErrors[keyof CreateStudentComponentHandlerErrors];

export type CreateStudentComponentHandlerResponses = {
    /**
     * Student deliverable component created successfully
     */
    200: CreateStudentComponentResponse;
};

export type CreateStudentComponentHandlerResponse = CreateStudentComponentHandlerResponses[keyof CreateStudentComponentHandlerResponses];

export type GetStudentComponentsForProjectHandlerData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverable-components/project/{project_id}';
};

export type GetStudentComponentsForProjectHandlerErrors = {
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetStudentComponentsForProjectHandlerError = GetStudentComponentsForProjectHandlerErrors[keyof GetStudentComponentsForProjectHandlerErrors];

export type GetStudentComponentsForProjectHandlerResponses = {
    /**
     * Found student components for project
     */
    200: GetStudentComponentsForProjectResponse;
};

export type GetStudentComponentsForProjectHandlerResponse = GetStudentComponentsForProjectHandlerResponses[keyof GetStudentComponentsForProjectHandlerResponses];

export type DeleteStudentComponentHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverable-components/{id}';
};

export type DeleteStudentComponentHandlerErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Student component not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type DeleteStudentComponentHandlerError = DeleteStudentComponentHandlerErrors[keyof DeleteStudentComponentHandlerErrors];

export type DeleteStudentComponentHandlerResponses = {
    /**
     * Student component deleted successfully
     */
    200: unknown;
};

export type GetStudentComponentHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverable-components/{id}';
};

export type GetStudentComponentHandlerErrors = {
    /**
     * Student component not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetStudentComponentHandlerError = GetStudentComponentHandlerErrors[keyof GetStudentComponentHandlerErrors];

export type GetStudentComponentHandlerResponses = {
    /**
     * Found student component
     */
    200: StudentComponentResponse;
};

export type GetStudentComponentHandlerResponse = GetStudentComponentHandlerResponses[keyof GetStudentComponentHandlerResponses];

export type UpdateStudentComponentHandlerData = {
    body: UpdateStudentComponentScheme;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverable-components/{id}';
};

export type UpdateStudentComponentHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Student component not found
     */
    404: JsonError;
    /**
     * Component with this name already exists for the project
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateStudentComponentHandlerError = UpdateStudentComponentHandlerErrors[keyof UpdateStudentComponentHandlerErrors];

export type UpdateStudentComponentHandlerResponses = {
    /**
     * Component updated successfully
     */
    200: unknown;
};

export type GetDeliverablesForStudentComponentHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverable-components/{id}/deliverables';
};

export type GetDeliverablesForStudentComponentHandlerErrors = {
    /**
     * Student component not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetDeliverablesForStudentComponentHandlerError = GetDeliverablesForStudentComponentHandlerErrors[keyof GetDeliverablesForStudentComponentHandlerErrors];

export type GetDeliverablesForStudentComponentHandlerResponses = {
    /**
     * Found deliverables for student component
     */
    200: GetDeliverablesForStudentComponentResponse;
};

export type GetDeliverablesForStudentComponentHandlerResponse = GetDeliverablesForStudentComponentHandlerResponses[keyof GetDeliverablesForStudentComponentHandlerResponses];

export type GetAllStudentDeliverablesHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/admins/student-deliverables';
};

export type GetAllStudentDeliverablesHandlerErrors = {
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetAllStudentDeliverablesHandlerError = GetAllStudentDeliverablesHandlerErrors[keyof GetAllStudentDeliverablesHandlerErrors];

export type GetAllStudentDeliverablesHandlerResponses = {
    /**
     * Found all student deliverables
     */
    200: GetAllStudentDeliverablesResponse;
};

export type GetAllStudentDeliverablesHandlerResponse = GetAllStudentDeliverablesHandlerResponses[keyof GetAllStudentDeliverablesHandlerResponses];

export type CreateStudentDeliverableHandlerData = {
    body: CreateStudentDeliverableScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/student-deliverables';
};

export type CreateStudentDeliverableHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Deliverable with this name already exists for the project
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type CreateStudentDeliverableHandlerError = CreateStudentDeliverableHandlerErrors[keyof CreateStudentDeliverableHandlerErrors];

export type CreateStudentDeliverableHandlerResponses = {
    /**
     * Student deliverable created successfully
     */
    200: CreateStudentDeliverableResponse;
};

export type CreateStudentDeliverableHandlerResponse = CreateStudentDeliverableHandlerResponses[keyof CreateStudentDeliverableHandlerResponses];

export type CreateStudentDeliverableComponentHandlerData = {
    body: CreateStudentDeliverableComponentScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/student-deliverables-components';
};

export type CreateStudentDeliverableComponentHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Relationship already exists
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type CreateStudentDeliverableComponentHandlerError = CreateStudentDeliverableComponentHandlerErrors[keyof CreateStudentDeliverableComponentHandlerErrors];

export type CreateStudentDeliverableComponentHandlerResponses = {
    /**
     * Student deliverable-component relationship created successfully
     */
    200: CreateStudentDeliverableComponentResponse;
};

export type CreateStudentDeliverableComponentHandlerResponse = CreateStudentDeliverableComponentHandlerResponses[keyof CreateStudentDeliverableComponentHandlerResponses];

export type GetComponentsForDeliverableHandler2Data = {
    body?: never;
    path: {
        deliverable_id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverables-components/components/{deliverable_id}';
};

export type GetComponentsForDeliverableHandler2Errors = {
    /**
     * Student deliverable not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetComponentsForDeliverableHandler2Error = GetComponentsForDeliverableHandler2Errors[keyof GetComponentsForDeliverableHandler2Errors];

export type GetComponentsForDeliverableHandler2Responses = {
    /**
     * Found components for student deliverable
     */
    200: GetComponentsForDeliverableResponse;
};

export type GetComponentsForDeliverableHandler2Response = GetComponentsForDeliverableHandler2Responses[keyof GetComponentsForDeliverableHandler2Responses];

export type GetDeliverablesForComponentHandler2Data = {
    body?: never;
    path: {
        component_id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverables-components/deliverables/{component_id}';
};

export type GetDeliverablesForComponentHandler2Errors = {
    /**
     * Student deliverable component not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetDeliverablesForComponentHandler2Error = GetDeliverablesForComponentHandler2Errors[keyof GetDeliverablesForComponentHandler2Errors];

export type GetDeliverablesForComponentHandler2Responses = {
    /**
     * Found deliverables for student component
     */
    200: GetDeliverablesForComponentResponse;
};

export type GetDeliverablesForComponentHandler2Response = GetDeliverablesForComponentHandler2Responses[keyof GetDeliverablesForComponentHandler2Responses];

export type DeleteStudentDeliverableComponentHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverables-components/{id}';
};

export type DeleteStudentDeliverableComponentHandlerErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Relationship not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type DeleteStudentDeliverableComponentHandlerError = DeleteStudentDeliverableComponentHandlerErrors[keyof DeleteStudentDeliverableComponentHandlerErrors];

export type DeleteStudentDeliverableComponentHandlerResponses = {
    /**
     * Student deliverable component relationship deleted successfully
     */
    200: unknown;
};

export type UpdateStudentDeliverableComponentHandlerData = {
    body: UpdateStudentDeliverableComponentScheme;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverables-components/{id}';
};

export type UpdateStudentDeliverableComponentHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Relationship not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateStudentDeliverableComponentHandlerError = UpdateStudentDeliverableComponentHandlerErrors[keyof UpdateStudentDeliverableComponentHandlerErrors];

export type UpdateStudentDeliverableComponentHandlerResponses = {
    /**
     * Student deliverable component relationship updated successfully
     */
    200: unknown;
};

export type GetStudentDeliverablesForProjectHandlerData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverables/project/{project_id}';
};

export type GetStudentDeliverablesForProjectHandlerErrors = {
    /**
     * Project not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetStudentDeliverablesForProjectHandlerError = GetStudentDeliverablesForProjectHandlerErrors[keyof GetStudentDeliverablesForProjectHandlerErrors];

export type GetStudentDeliverablesForProjectHandlerResponses = {
    /**
     * Found student deliverables for project
     */
    200: GetStudentDeliverablesForProjectResponse;
};

export type GetStudentDeliverablesForProjectHandlerResponse = GetStudentDeliverablesForProjectHandlerResponses[keyof GetStudentDeliverablesForProjectHandlerResponses];

export type DeleteStudentDeliverableHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverables/{id}';
};

export type DeleteStudentDeliverableHandlerErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Student deliverable not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type DeleteStudentDeliverableHandlerError = DeleteStudentDeliverableHandlerErrors[keyof DeleteStudentDeliverableHandlerErrors];

export type DeleteStudentDeliverableHandlerResponses = {
    /**
     * Student deliverable deleted successfully
     */
    200: unknown;
};

export type GetStudentDeliverableHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverables/{id}';
};

export type GetStudentDeliverableHandlerErrors = {
    /**
     * Student deliverable not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetStudentDeliverableHandlerError = GetStudentDeliverableHandlerErrors[keyof GetStudentDeliverableHandlerErrors];

export type GetStudentDeliverableHandlerResponses = {
    /**
     * Found student deliverable
     */
    200: StudentDeliverableResponse;
};

export type GetStudentDeliverableHandlerResponse = GetStudentDeliverableHandlerResponses[keyof GetStudentDeliverableHandlerResponses];

export type UpdateStudentDeliverableHandlerData = {
    body: UpdateStudentDeliverableScheme;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverables/{id}';
};

export type UpdateStudentDeliverableHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Student deliverable not found
     */
    404: JsonError;
    /**
     * Deliverable with this name already exists for the project
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateStudentDeliverableHandlerError = UpdateStudentDeliverableHandlerErrors[keyof UpdateStudentDeliverableHandlerErrors];

export type UpdateStudentDeliverableHandlerResponses = {
    /**
     * Student deliverable updated successfully
     */
    200: unknown;
};

export type GetComponentsForStudentDeliverableHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/student-deliverables/{id}/components';
};

export type GetComponentsForStudentDeliverableHandlerErrors = {
    /**
     * Student deliverable not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetComponentsForStudentDeliverableHandlerError = GetComponentsForStudentDeliverableHandlerErrors[keyof GetComponentsForStudentDeliverableHandlerErrors];

export type GetComponentsForStudentDeliverableHandlerResponses = {
    /**
     * Found components for student deliverable
     */
    200: GetComponentsForStudentDeliverableResponse;
};

export type GetComponentsForStudentDeliverableHandlerResponse = GetComponentsForStudentDeliverableHandlerResponses[keyof GetComponentsForStudentDeliverableHandlerResponses];

export type GetAllAdminsHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/admins/users';
};

export type GetAllAdminsHandlerErrors = {
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type GetAllAdminsHandlerError = GetAllAdminsHandlerErrors[keyof GetAllAdminsHandlerErrors];

export type GetAllAdminsHandlerResponses = {
    /**
     * Found admins
     */
    200: GetAllAdminsResponse;
};

export type GetAllAdminsHandlerResponse = GetAllAdminsHandlerResponses[keyof GetAllAdminsHandlerResponses];

export type CreateAdminHandlerData = {
    body: CreateAdminScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/users';
};

export type CreateAdminHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type CreateAdminHandlerError = CreateAdminHandlerErrors[keyof CreateAdminHandlerErrors];

export type CreateAdminHandlerResponses = {
    /**
     * Admin created successfully
     */
    200: CreateAdminResponse;
};

export type CreateAdminHandlerResponse = CreateAdminHandlerResponses[keyof CreateAdminHandlerResponses];

export type AdminsMeHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/admins/users/me';
};

export type AdminsMeHandlerErrors = {
    /**
     * User not found in request context
     */
    404: JsonError;
    /**
     * Internal server error during serialization or database query
     */
    500: JsonError;
};

export type AdminsMeHandlerError = AdminsMeHandlerErrors[keyof AdminsMeHandlerErrors];

export type AdminsMeHandlerResponses = {
    /**
     * Successfully retrieved user profile
     */
    200: AdminResponseScheme;
};

export type AdminsMeHandlerResponse = AdminsMeHandlerResponses[keyof AdminsMeHandlerResponses];

export type UpdateMeAdminHandlerData = {
    body: UpdateMeAdminScheme;
    path?: never;
    query?: never;
    url: '/v1/admins/users/me';
};

export type UpdateMeAdminHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Email already exists
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateMeAdminHandlerError = UpdateMeAdminHandlerErrors[keyof UpdateMeAdminHandlerErrors];

export type UpdateMeAdminHandlerResponses = {
    /**
     * Admin profile updated successfully
     */
    200: unknown;
};

export type DeleteAdminHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/users/{id}';
};

export type DeleteAdminHandlerErrors = {
    /**
     * Admin not found
     */
    404: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type DeleteAdminHandlerError = DeleteAdminHandlerErrors[keyof DeleteAdminHandlerErrors];

export type DeleteAdminHandlerResponses = {
    /**
     * Admin deleted successfully
     */
    200: unknown;
};

export type GetOneAdminHandlerData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/users/{id}';
};

export type GetOneAdminHandlerErrors = {
    /**
     * Admin not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetOneAdminHandlerError = GetOneAdminHandlerErrors[keyof GetOneAdminHandlerErrors];

export type GetOneAdminHandlerResponses = {
    /**
     * Found admin
     */
    200: AdminResponseScheme;
};

export type GetOneAdminHandlerResponse = GetOneAdminHandlerResponses[keyof GetOneAdminHandlerResponses];

export type UpdateAdminHandlerData = {
    body: UpdateAdminScheme;
    path: {
        id: number;
    };
    query?: never;
    url: '/v1/admins/users/{id}';
};

export type UpdateAdminHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateAdminHandlerError = UpdateAdminHandlerErrors[keyof UpdateAdminHandlerErrors];

export type UpdateAdminHandlerResponses = {
    /**
     * Admin updated successfully
     */
    200: unknown;
};

export type AllowedDomainsHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/students/auth/allowed-domains';
};

export type AllowedDomainsHandlerResponses = {
    /**
     * List of allowed email domains
     */
    200: AllowedDomainsResponse;
};

export type AllowedDomainsHandlerResponse = AllowedDomainsHandlerResponses[keyof AllowedDomainsHandlerResponses];

export type ConfirmStudentHandlerData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Email confirmation token
         */
        t: string;
    };
    url: '/v1/students/auth/confirm';
};

export type ConfirmStudentHandlerErrors = {
    /**
     * Invalid token
     */
    400: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type ConfirmStudentHandlerError = ConfirmStudentHandlerErrors[keyof ConfirmStudentHandlerErrors];

export type ConfirmStudentHandlerResponses = {
    /**
     * Account confirmed successfully
     */
    204: void;
};

export type ConfirmStudentHandlerResponse = ConfirmStudentHandlerResponses[keyof ConfirmStudentHandlerResponses];

export type ForgotPasswordHandler2Data = {
    body: ForgotPasswordSchema;
    path?: never;
    query?: never;
    url: '/v1/students/auth/forgot-password';
};

export type ForgotPasswordHandler2Errors = {
    /**
     * Internal server error
     */
    500: JsonError;
};

export type ForgotPasswordHandler2Error = ForgotPasswordHandler2Errors[keyof ForgotPasswordHandler2Errors];

export type ForgotPasswordHandler2Responses = {
    /**
     * Password reset email sent successfully (or email doesn't exist)
     */
    204: void;
};

export type ForgotPasswordHandler2Response = ForgotPasswordHandler2Responses[keyof ForgotPasswordHandler2Responses];

export type StudentsLoginHandlerData = {
    body: LoginStudentsSchema;
    path?: never;
    query?: never;
    url: '/v1/students/auth/login';
};

export type StudentsLoginHandlerErrors = {
    /**
     * Wrong credentials
     */
    401: JsonError;
    /**
     * Account pending email confirmation
     */
    403: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type StudentsLoginHandlerError = StudentsLoginHandlerErrors[keyof StudentsLoginHandlerErrors];

export type StudentsLoginHandlerResponses = {
    /**
     * Login successful
     */
    200: LoginStudentsResponse;
};

export type StudentsLoginHandlerResponse = StudentsLoginHandlerResponses[keyof StudentsLoginHandlerResponses];

export type ResetPasswordHandler2Data = {
    body: ResetPasswordSchema;
    path?: never;
    query: {
        /**
         * Password reset token from email
         */
        t: string;
    };
    url: '/v1/students/auth/reset-password';
};

export type ResetPasswordHandler2Errors = {
    /**
     * Invalid or expired token
     */
    400: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type ResetPasswordHandler2Error = ResetPasswordHandler2Errors[keyof ResetPasswordHandler2Errors];

export type ResetPasswordHandler2Responses = {
    /**
     * Password reset successfully
     */
    204: void;
};

export type ResetPasswordHandler2Response = ResetPasswordHandler2Responses[keyof ResetPasswordHandler2Responses];

export type StudentSignupHandlerData = {
    body: StudentSignupScheme;
    path?: never;
    query?: never;
    url: '/v1/students/auth/signup';
};

export type StudentSignupHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Student with this email or university ID already exists
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
    /**
     * Account created email was not sent
     */
    503: JsonError;
};

export type StudentSignupHandlerError = StudentSignupHandlerErrors[keyof StudentSignupHandlerErrors];

export type StudentSignupHandlerResponses = {
    /**
     * Account created successfully
     */
    202: StudentSignupResponse;
};

export type StudentSignupHandlerResponse = StudentSignupHandlerResponses[keyof StudentSignupHandlerResponses];

export type UpdateStudentDeliverableSelectionData = {
    body: UpdateStudentDeliverableSelectionRequest;
    path?: never;
    query?: never;
    url: '/v1/students/deliverable-selection';
};

export type UpdateStudentDeliverableSelectionErrors = {
    /**
     * Invalid request or deadline passed
     */
    400: JsonError;
    /**
     * Student not in a group for this project
     */
    403: JsonError;
    /**
     * Selection, deliverable or project not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type UpdateStudentDeliverableSelectionError = UpdateStudentDeliverableSelectionErrors[keyof UpdateStudentDeliverableSelectionErrors];

export type UpdateStudentDeliverableSelectionResponses = {
    /**
     * Selection updated successfully
     */
    200: UpdateStudentDeliverableSelectionResponse;
};

export type UpdateStudentDeliverableSelectionResponse2 = UpdateStudentDeliverableSelectionResponses[keyof UpdateStudentDeliverableSelectionResponses];

export type CreateStudentDeliverableSelectionData = {
    body: CreateStudentDeliverableSelectionRequest;
    path?: never;
    query?: never;
    url: '/v1/students/deliverable-selection';
};

export type CreateStudentDeliverableSelectionErrors = {
    /**
     * Invalid request or deadline passed
     */
    400: JsonError;
    /**
     * Student not in a group for this project
     */
    403: JsonError;
    /**
     * Deliverable or project not found
     */
    404: JsonError;
    /**
     * Student already has a selection for this project
     */
    409: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type CreateStudentDeliverableSelectionError = CreateStudentDeliverableSelectionErrors[keyof CreateStudentDeliverableSelectionErrors];

export type CreateStudentDeliverableSelectionResponses = {
    /**
     * Deliverable selected successfully
     */
    201: CreateStudentDeliverableSelectionResponse;
};

export type CreateStudentDeliverableSelectionResponse2 = CreateStudentDeliverableSelectionResponses[keyof CreateStudentDeliverableSelectionResponses];

export type DeleteStudentDeliverableSelectionData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/students/deliverable-selection/project/{project_id}';
};

export type DeleteStudentDeliverableSelectionErrors = {
    /**
     * No selection found to delete
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type DeleteStudentDeliverableSelectionError = DeleteStudentDeliverableSelectionErrors[keyof DeleteStudentDeliverableSelectionErrors];

export type DeleteStudentDeliverableSelectionResponses = {
    /**
     * Selection deleted successfully
     */
    200: DeleteStudentDeliverableSelectionResponse;
};

export type DeleteStudentDeliverableSelectionResponse2 = DeleteStudentDeliverableSelectionResponses[keyof DeleteStudentDeliverableSelectionResponses];

export type GetStudentDeliverableSelectionData = {
    body?: never;
    path: {
        project_id: number;
    };
    query?: never;
    url: '/v1/students/deliverable-selection/project/{project_id}';
};

export type GetStudentDeliverableSelectionErrors = {
    /**
     * No deliverable selected for this project
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetStudentDeliverableSelectionError = GetStudentDeliverableSelectionErrors[keyof GetStudentDeliverableSelectionErrors];

export type GetStudentDeliverableSelectionResponses = {
    /**
     * Deliverable selection found
     */
    200: StudentDeliverableSelectionResponse;
};

export type GetStudentDeliverableSelectionResponse = GetStudentDeliverableSelectionResponses[keyof GetStudentDeliverableSelectionResponses];

export type DeleteComponentImplementationDetailData = {
    body: DeleteComponentImplementationDetailRequest;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/group-component-implementation-details/{group_id}';
};

export type DeleteComponentImplementationDetailErrors = {
    /**
     * Invalid request
     */
    400: JsonError;
    /**
     * Not authorized - must be group leader
     */
    403: JsonError;
    /**
     * Group, selection, or implementation detail not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type DeleteComponentImplementationDetailError = DeleteComponentImplementationDetailErrors[keyof DeleteComponentImplementationDetailErrors];

export type DeleteComponentImplementationDetailResponses = {
    /**
     * Component implementation detail deleted successfully
     */
    200: DeleteComponentImplementationDetailResponse;
};

export type DeleteComponentImplementationDetailResponse2 = DeleteComponentImplementationDetailResponses[keyof DeleteComponentImplementationDetailResponses];

export type GetComponentImplementationDetailsData = {
    body?: never;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/group-component-implementation-details/{group_id}';
};

export type GetComponentImplementationDetailsErrors = {
    /**
     * Group or selection not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetComponentImplementationDetailsError = GetComponentImplementationDetailsErrors[keyof GetComponentImplementationDetailsErrors];

export type GetComponentImplementationDetailsResponses = {
    /**
     * Component implementation details found
     */
    200: GetComponentImplementationDetailsResponse;
};

export type GetComponentImplementationDetailsResponse2 = GetComponentImplementationDetailsResponses[keyof GetComponentImplementationDetailsResponses];

export type UpdateComponentImplementationDetailData = {
    body: UpdateComponentImplementationDetailRequest;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/group-component-implementation-details/{group_id}';
};

export type UpdateComponentImplementationDetailErrors = {
    /**
     * Invalid request
     */
    400: JsonError;
    /**
     * Not authorized - must be group leader
     */
    403: JsonError;
    /**
     * Group, selection, or implementation detail not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type UpdateComponentImplementationDetailError = UpdateComponentImplementationDetailErrors[keyof UpdateComponentImplementationDetailErrors];

export type UpdateComponentImplementationDetailResponses = {
    /**
     * Component implementation detail updated successfully
     */
    200: UpdateComponentImplementationDetailResponse;
};

export type UpdateComponentImplementationDetailResponse2 = UpdateComponentImplementationDetailResponses[keyof UpdateComponentImplementationDetailResponses];

export type CreateComponentImplementationDetailData = {
    body: CreateComponentImplementationDetailRequest;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/group-component-implementation-details/{group_id}';
};

export type CreateComponentImplementationDetailErrors = {
    /**
     * Invalid request
     */
    400: JsonError;
    /**
     * Not authorized - must be group leader
     */
    403: JsonError;
    /**
     * Group, selection, or component not found
     */
    404: JsonError;
    /**
     * Implementation details already exist for this component
     */
    409: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type CreateComponentImplementationDetailError = CreateComponentImplementationDetailErrors[keyof CreateComponentImplementationDetailErrors];

export type CreateComponentImplementationDetailResponses = {
    /**
     * Component implementation detail created successfully
     */
    201: CreateComponentImplementationDetailResponse;
};

export type CreateComponentImplementationDetailResponse2 = CreateComponentImplementationDetailResponses[keyof CreateComponentImplementationDetailResponses];

export type GetGroupDeliverableSelectionData = {
    body?: never;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/group-deliverable-selections/{group_id}';
};

export type GetGroupDeliverableSelectionErrors = {
    /**
     * No deliverable selected yet or group not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetGroupDeliverableSelectionError = GetGroupDeliverableSelectionErrors[keyof GetGroupDeliverableSelectionErrors];

export type GetGroupDeliverableSelectionResponses = {
    /**
     * Deliverable selection found
     */
    200: GroupDeliverableSelectionResponse;
};

export type GetGroupDeliverableSelectionResponse = GetGroupDeliverableSelectionResponses[keyof GetGroupDeliverableSelectionResponses];

export type CreateGroupDeliverableSelectionData = {
    body: CreateGroupDeliverableSelectionRequest;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/group-deliverable-selections/{group_id}';
};

export type CreateGroupDeliverableSelectionErrors = {
    /**
     * Invalid request
     */
    400: JsonError;
    /**
     * Not authorized - must be group leader
     */
    403: JsonError;
    /**
     * Group or deliverable not found
     */
    404: JsonError;
    /**
     * Group already has a selection or link already in use
     */
    409: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type CreateGroupDeliverableSelectionError = CreateGroupDeliverableSelectionErrors[keyof CreateGroupDeliverableSelectionErrors];

export type CreateGroupDeliverableSelectionResponses = {
    /**
     * Deliverable selected successfully
     */
    201: CreateGroupDeliverableSelectionResponse;
};

export type CreateGroupDeliverableSelectionResponse2 = CreateGroupDeliverableSelectionResponses[keyof CreateGroupDeliverableSelectionResponses];

export type GetGroupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/students/groups';
};

export type GetGroupsErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type GetGroupsError = GetGroupsErrors[keyof GetGroupsErrors];

export type GetGroupsResponses = {
    /**
     * Successfully retrieved student's groups
     */
    200: GetGroupsResponse;
};

export type GetGroupsResponse2 = GetGroupsResponses[keyof GetGroupsResponses];

export type CreateGroupData = {
    body: CreateGroupRequest;
    path?: never;
    query?: never;
    url: '/v1/students/groups';
};

export type CreateGroupErrors = {
    /**
     * Invalid request data
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * User already has a group for this project
     */
    409: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type CreateGroupError = CreateGroupErrors[keyof CreateGroupErrors];

export type CreateGroupResponses = {
    /**
     * Group created successfully
     */
    201: CreateGroupResponse;
};

export type CreateGroupResponse2 = CreateGroupResponses[keyof CreateGroupResponses];

export type CheckNameData = {
    body: CheckNameRequest;
    path?: never;
    query?: never;
    url: '/v1/students/groups/check-name';
};

export type CheckNameErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type CheckNameError = CheckNameErrors[keyof CheckNameErrors];

export type CheckNameResponses = {
    /**
     * A boolean indicating if name exists already
     */
    200: CheckNameResponse;
};

export type CheckNameResponse2 = CheckNameResponses[keyof CheckNameResponses];

export type DeleteGroupData = {
    body?: never;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/groups/{group_id}';
};

export type DeleteGroupErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Insufficient permissions
     */
    403: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type DeleteGroupError = DeleteGroupErrors[keyof DeleteGroupErrors];

export type DeleteGroupResponses = {
    /**
     * Group deleted successfully
     */
    200: DeleteGroupResponse;
};

export type DeleteGroupResponse2 = DeleteGroupResponses[keyof DeleteGroupResponses];

export type RemoveMember2Data = {
    body: RemoveMemberRequest;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/groups/{group_id}/members';
};

export type RemoveMember2Errors = {
    /**
     * Cannot remove the group leader
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Insufficient permissions
     */
    403: JsonError;
    /**
     * Group or member not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type RemoveMember2Error = RemoveMember2Errors[keyof RemoveMember2Errors];

export type RemoveMember2Responses = {
    /**
     * Member removed successfully
     */
    204: void;
};

export type RemoveMember2Response = RemoveMember2Responses[keyof RemoveMember2Responses];

export type ListGroupMembersData = {
    body?: never;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/groups/{group_id}/members';
};

export type ListGroupMembersErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Group not found
     */
    404: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type ListGroupMembersError = ListGroupMembersErrors[keyof ListGroupMembersErrors];

export type ListGroupMembersResponses = {
    /**
     * Group members list
     */
    200: GroupMembersResponse;
};

export type ListGroupMembersResponse = ListGroupMembersResponses[keyof ListGroupMembersResponses];

export type AddMember2Data = {
    body: AddMemberRequest;
    path: {
        group_id: number;
    };
    query?: never;
    url: '/v1/students/groups/{group_id}/members';
};

export type AddMember2Errors = {
    /**
     * Student email not confirmed or group at maximum capacity
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Insufficient permissions
     */
    403: JsonError;
    /**
     * Group or student not found
     */
    404: JsonError;
    /**
     * Student is already in a group for this project
     */
    409: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type AddMember2Error = AddMember2Errors[keyof AddMember2Errors];

export type AddMember2Responses = {
    /**
     * Member added successfully
     */
    200: MemberInfo;
};

export type AddMember2Response = AddMember2Responses[keyof AddMember2Responses];

export type GetStudentProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/students/projects';
};

export type GetStudentProjectsErrors = {
    /**
     * Internal server error during serialization or database query
     */
    500: JsonError;
};

export type GetStudentProjectsError = GetStudentProjectsErrors[keyof GetStudentProjectsErrors];

export type GetStudentProjectsResponses = {
    /**
     * Successfully retrieved student's projects with deliverables and components
     */
    200: GetStudentProjects;
};

export type GetStudentProjectsResponse = GetStudentProjectsResponses[keyof GetStudentProjectsResponses];

export type ValidateCodeData = {
    body: ValidateCodeRequest;
    path?: never;
    query?: never;
    url: '/v1/students/security-codes/validate';
};

export type ValidateCodeErrors = {
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Internal server error
     */
    500: JsonError;
};

export type ValidateCodeError = ValidateCodeErrors[keyof ValidateCodeErrors];

export type ValidateCodeResponses = {
    /**
     * Security code validation result
     */
    200: ValidateCodeResponse;
};

export type ValidateCodeResponse2 = ValidateCodeResponses[keyof ValidateCodeResponses];

export type StudentsMeHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/students/users/me';
};

export type StudentsMeHandlerErrors = {
    /**
     * User not found in request context
     */
    404: JsonError;
    /**
     * Internal server error during serialization or database query
     */
    500: JsonError;
};

export type StudentsMeHandlerError = StudentsMeHandlerErrors[keyof StudentsMeHandlerErrors];

export type StudentsMeHandlerResponses = {
    /**
     * Successfully retrieved user profile
     */
    200: GetMeStudentResponse;
};

export type StudentsMeHandlerResponse = StudentsMeHandlerResponses[keyof StudentsMeHandlerResponses];

export type UpdateMeStudentHandlerData = {
    body: UpdateMeStudentScheme;
    path?: never;
    query?: never;
    url: '/v1/students/users/me';
};

export type UpdateMeStudentHandlerErrors = {
    /**
     * Invalid data in request
     */
    400: JsonError;
    /**
     * Authentication required
     */
    401: JsonError;
    /**
     * Email already exists
     */
    409: JsonError;
    /**
     * Internal server error occurred
     */
    500: JsonError;
};

export type UpdateMeStudentHandlerError = UpdateMeStudentHandlerErrors[keyof UpdateMeStudentHandlerErrors];

export type UpdateMeStudentHandlerResponses = {
    /**
     * Student profile updated successfully
     */
    200: unknown;
};

export type VersionInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/version';
};

export type VersionInfoResponses = {
    /**
     * Version information
     */
    200: VersionResponse;
};

export type VersionInfoResponse = VersionInfoResponses[keyof VersionInfoResponses];
